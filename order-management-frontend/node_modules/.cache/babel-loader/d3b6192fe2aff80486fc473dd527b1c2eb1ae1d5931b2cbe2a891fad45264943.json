{"ast":null,"code":"// File: src/services/api.js\nimport axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:5045/api'\n});\nexport const fetchOrders = () => API.get('/orders');\nexport const createOrder = async order => {\n  try {\n    const response = await API.post('/orders', {\n      creator: order.creator,\n      responsible: order.responsible,\n      company: order.company\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error.message);\n    throw error;\n  }\n};\n//export const fetchOrder = (orderId) => API.get(`/orders/${orderId}`);\nexport const fetchOrder = async orderId => {\n  try {\n    if (!orderId) {\n      throw new Error('orderId is required to fetch an order');\n    }\n    const response = await API.get(`/orders/${orderId}`); // Correct endpoint\n    console.log('Order API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching order from API:', error.message);\n    throw error;\n  }\n};\nexport const fetchLineItems = orderId => API.get(`/lineitems/${orderId}`);\nexport const fetchProcesses = async () => {\n  try {\n    const response = await API.get('/processes');\n    console.log('Processes API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\nexport const fetchVendors = async () => {\n  try {\n    const response = await API.get('/vendors');\n    console.log('Vendors API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\nexport const fetchShapes = async () => {\n  try {\n    const response = await API.get('/shapes');\n    console.log('Shapes API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\nexport const fetchGrades = async () => {\n  try {\n    const response = await API.get('/grades');\n    console.log('Grades API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\nexport const editLineitem = lineitem => API.put(`/lineitems/${lineitem}`);\nexport const createVendor = vendor => API.post('/vendors', vendor);\nexport const createProcess = process => API.post('/processes', process);\nexport const createShape = shape => API.post('/shapes', shape);\nexport const createGrade = grade => API.post('/grades', grade);\nexport const createLineItem = async lineItem => {\n  try {\n    const response = await API.post('/lineitems', lineItem); // Send the full lineItem object\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error creating line item:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","fetchOrders","get","createOrder","order","response","post","creator","responsible","company","data","error","console","message","fetchOrder","orderId","Error","log","fetchLineItems","fetchProcesses","fetchVendors","fetchShapes","fetchGrades","editLineitem","lineitem","put","createVendor","vendor","createProcess","process","createShape","shape","createGrade","grade","createLineItem","lineItem","_error$response"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/services/api.js"],"sourcesContent":["// File: src/services/api.js\nimport axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'http://localhost:5045/api',\n});\n\nexport const fetchOrders = () => API.get('/orders');\nexport const createOrder = async (order) => {\n  try {\n    const response = await API.post('/orders', {\n      creator: order.creator,\n      responsible: order.responsible,\n      company: order.company,\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error.message);\n    throw error;\n  }\n};\n//export const fetchOrder = (orderId) => API.get(`/orders/${orderId}`);\nexport const fetchOrder = async (orderId) => {\n  try {\n    if (!orderId) {\n      throw new Error('orderId is required to fetch an order');\n    }\n    const response = await API.get(`/orders/${orderId}`); // Correct endpoint\n    console.log('Order API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching order from API:', error.message);\n    throw error;\n  }\n};\n\nexport const fetchLineItems = (orderId) => API.get(`/lineitems/${orderId}`);\n\nexport const fetchProcesses = async () => {\n  try {\n    const response = await API.get('/processes');\n    console.log('Processes API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\nexport const fetchVendors = async () => {\n  try {\n    const response = await API.get('/vendors');\n    console.log('Vendors API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\nexport const fetchShapes = async () => {\n  try {\n    const response = await API.get('/shapes');\n    console.log('Shapes API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\n\nexport const fetchGrades = async () => {\n  try {\n    const response = await API.get('/grades');\n    console.log('Grades API response:', response.data); // Log response\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.message);\n    throw error;\n  }\n};\nexport const editLineitem = (lineitem) => API.put(`/lineitems/${lineitem}`)\nexport const createVendor = (vendor) => API.post('/vendors', vendor);\nexport const createProcess = (process) => API.post('/processes', process);\nexport const createShape = (shape) => API.post('/shapes', shape);\nexport const createGrade = (grade) => API.post('/grades', grade);\nexport const createLineItem = async (lineItem) => {\n  try {\n    const response = await API.post('/lineitems', lineItem); // Send the full lineItem object\n    return response.data;\n  } catch (error) {\n    console.error('Error creating line item:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport default API;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}