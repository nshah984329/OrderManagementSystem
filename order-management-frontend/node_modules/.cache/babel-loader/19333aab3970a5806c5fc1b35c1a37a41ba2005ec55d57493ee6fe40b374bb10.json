{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchExecutionDetailsForLineItem, addExecutionDetails, fetchVendors, fetchProcesses, fetchLineItemProcesses, reorderLineItemProcesses, createLineItemProcess, deleteLineItemProcess, fetchAllVendorProcesses } from '../services/api';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, useSortable, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport ExecutionEditPopup from './ExecutionEditPopup'; // ✅ Import ExecutionEditPopup\nimport { KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPopup = ({\n  lineItem,\n  onClose,\n  onSave\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [vendorProcesses, setVendorProcesses] = useState([]); // Vendor-Process relationships\n  const [lineItemProcesses, setLineItemProcesses] = useState([]); // Existing LineItemProcesses\n  const [newProcess, setNewProcess] = useState({\n    processId: '',\n    vendorId: ''\n  });\n  const [draggedProcess, setDraggedProcess] = useState(null);\n  const [filteredVendors, setFilteredVendors] = useState([]); // Vendors filtered by process\n  const [filteredProcesses, setFilteredProcesses] = useState([]); // Processes filtered by vendor\n  const [selectedExecution, setSelectedExecution] = useState(null); // ✅ Execution to be edited\n\n  useEffect(() => {\n    // Fetch initial data for vendors, processes, and line item processes\n    const loadInitialData = async () => {\n      try {\n        const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n        console.log('editpopup: Encoded lineItemId:', encodedLineItemId);\n\n        // Fetch vendors\n        const vendorData = await fetchVendors();\n        console.log('editpopup: Fetched vendors:', vendorData);\n        setVendors(vendorData);\n\n        // Fetch processes\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n\n        // Fetch line item processes\n        const lineItemProcessData = await fetchLineItemProcesses(encodedLineItemId);\n        console.log('editpopup: Fetched line item processes:', lineItemProcessData);\n        console.log('Fetching initial data...');\n        const vendorProcessData = await fetchAllVendorProcesses();\n        console.log('Fetched all vendor-process mappings:', vendorProcessData);\n        if (!Array.isArray(vendorProcessData)) {\n          console.error('Invalid data format for vendorProcesses:', vendorProcessData);\n          return;\n        }\n        setVendorProcesses(vendorProcessData);\n        // Log each item in lineItemProcessData\n        lineItemProcessData.forEach((item, index) => {\n          console.log(`editpopup: Line item process ${index}:`, item);\n          console.log(`editpopup: Line item process ${index} _id:`, item._id);\n        });\n        setLineItemProcesses(lineItemProcessData.map((process, index) => ({\n          ...process,\n          customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${process.sequence}`\n        })));\n        //setVendorProcesses(vendorProcessData);\n      } catch (err) {\n        console.error('editpopup: Error loading initial data:', err.message);\n      }\n    };\n    if (lineItem.lineItemId) {\n      loadInitialData(); // Fetch data if lineItemId is available\n    }\n  }, [lineItem.lineItemId]);\n  // Filter vendors based on selected process\n  useEffect(() => {\n    console.log('Filtering vendors for processId:', newProcess.processId);\n    console.log('Current Vendor-Process mappings:', vendorProcesses);\n    console.log('Current Vendors:', vendors);\n    if (newProcess.processId) {\n      const allowedVendors = vendorProcesses.filter(vp => vp.processId === newProcess.processId).map(vp => vp.vendorId);\n      console.log('Allowed Vendors:', allowedVendors);\n      const updatedVendors = vendors.filter(v => allowedVendors.includes(v.vendorId));\n      console.log('Filtered Vendors:', updatedVendors);\n      setFilteredVendors(updatedVendors);\n    } else {\n      setFilteredVendors(vendors);\n    }\n  }, [newProcess.processId, vendors, vendorProcesses]);\n  useEffect(() => {\n    if (newProcess.vendorId) {\n      console.log('Filtering processes for vendorId:', newProcess.vendorId);\n      const allowedProcesses = vendorProcesses.filter(vp => vp.vendorId === newProcess.vendorId).map(vp => vp.processId);\n      console.log('Allowed Processes:', allowedProcesses);\n      setFilteredProcesses(processes.filter(p => allowedProcesses.includes(p.processId)));\n    } else {\n      setFilteredProcesses(processes);\n    }\n  }, [newProcess.vendorId, processes, vendorProcesses]);\n\n  // Sensors for drag-and-drop\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n\n  // Sortable item component\n  const SortableItem = ({\n    process\n  }) => {\n    _s();\n    const {\n      attributes,\n      listeners,\n      setNodeRef,\n      transform,\n      transition\n    } = useSortable({\n      id: process.customId,\n      disabled: false // 👈 Prevents buttons from triggering drag\n    });\n    const handleRemove = async e => {\n      e.stopPropagation(); // ✅ Prevent drag from triggering\n      e.preventDefault(); // ✅ Prevent unintended behavior\n      console.log(`🔴 Removing process: ${process.customId}`);\n      try {\n        await deleteLineItemProcess(lineItem.lineItemId, process.customId);\n        setLineItemProcesses(prev => prev.filter(item => item.customId !== process.customId));\n      } catch (err) {\n        console.error('Error removing process:', err);\n      }\n    };\n    const handleEditExecution = async e => {\n      e.stopPropagation(); // ✅ Prevent drag from triggering\n      e.preventDefault(); // ✅ Prevent unintended behavior\n      console.log(`🟠 Editing Execution for Process: ${process.customId}`);\n      try {\n        const executionDetails = await fetchExecutionDetailsForLineItem(lineItem.lineItemId);\n        const execution = executionDetails.find(exec => exec.processId === process.processId && exec.vendorId === process.vendorId);\n        if (execution) {\n          setSelectedExecution(execution);\n        } else {\n          console.warn(\"⚠️ No execution details found for this process\");\n        }\n      } catch (error) {\n        console.error('Error fetching execution details:', error);\n      }\n    };\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n      padding: '10px',\n      margin: '5px 0',\n      background: '#f8f8f8',\n      border: '1px solid #ddd',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Sequence: \", process.sequence, \", Process: \", process.processId, \", Vendor: \", process.vendorId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEditExecution,\n          onMouseDown: e => e.stopPropagation() // 👈 Fix: Prevent drag on button\n          ,\n          onTouchStart: e => e.stopPropagation() // 👈 Fix: Prevent touch drag\n          ,\n          style: {\n            background: 'orange',\n            color: 'white',\n            cursor: 'pointer'\n          },\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRemove,\n          onMouseDown: e => e.stopPropagation(),\n          onTouchStart: e => e.stopPropagation(),\n          style: {\n            color: 'red',\n            border: 'none',\n            background: 'none',\n            cursor: 'pointer'\n          },\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this);\n  };\n  _s(SortableItem, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n    return [useSortable];\n  });\n  const handleDragEnd = event => {\n    if (!event || !event.active || !event.over) {\n      console.warn('handleDragEnd: Missing active or over:', event);\n      return;\n    }\n    const {\n      active,\n      over\n    } = event;\n    if (!active.id || !over.id) {\n      console.warn('handleDragEnd: Missing ID in active or over:', {\n        active,\n        over\n      });\n      return;\n    }\n    console.log(`handleDragEnd: Moving ${active.id} over ${over.id}`);\n    setLineItemProcesses(items => {\n      const oldIndex = items.findIndex(item => item.customId === active.id);\n      const newIndex = items.findIndex(item => item.customId === over.id);\n      if (oldIndex === -1 || newIndex === -1) {\n        console.warn('handleDragEnd: Invalid indices:', {\n          oldIndex,\n          newIndex\n        });\n        return items;\n      }\n      const updatedItems = arrayMove(items, oldIndex, newIndex);\n      return updatedItems.map((item, index) => ({\n        ...item,\n        sequence: index + 1,\n        customId: `${item.lineItemId}/${item.vendorId}/${item.processId}/${index + 1}`\n      }));\n    });\n  };\n  const handleAddProcess = async () => {\n    if (!newProcess.processId || !newProcess.vendorId) {\n      console.warn('editpopup: Please select both a process and a vendor before adding.');\n      return;\n    }\n    try {\n      // Generate sequence number based on current processes count\n      const newSequence = lineItemProcesses.length + 1;\n\n      // Create a unique custom ID\n      const newCustomId = `${lineItem.lineItemId}/${newProcess.vendorId}/${newProcess.processId}/${newSequence}`;\n\n      // Check if the same process already exists\n      const isDuplicate = lineItemProcesses.some(item => item.customId === newCustomId);\n      if (isDuplicate) {\n        console.warn(`editpopup: Process with ID ${newCustomId} already exists.`);\n        return;\n      }\n      const newEntry = {\n        lineItemId: lineItem.lineItemId,\n        processId: newProcess.processId,\n        vendorId: newProcess.vendorId,\n        sequence: newSequence,\n        customId: newCustomId\n      };\n      console.log('editpopup: Sending new process to backend:', newEntry);\n\n      // Save to backend and capture response\n      const response = await createLineItemProcess(newEntry);\n      if (!response || response.error) {\n        console.error('editpopup: Backend error:', (response === null || response === void 0 ? void 0 : response.error) || 'Unknown error');\n        return;\n      }\n      console.log('editpopup: Process successfully added:', response);\n\n      // Fetch latest processes instead of appending manually (prevents stale data issues)\n      const updatedProcesses = await fetchLineItemProcesses(encodeURIComponent(lineItem.lineItemId));\n\n      // Update state with the newly fetched list\n      setLineItemProcesses(updatedProcesses.map((process, index) => ({\n        ...process,\n        sequence: index + 1,\n        // Ensure correct sequence\n        customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${index + 1}`\n      })));\n      console.log('editpopup: Updated lineItemProcesses after addition:', updatedProcesses);\n\n      // Reset form input\n      setNewProcess({\n        processId: '',\n        vendorId: ''\n      });\n    } catch (err) {\n      console.error('editpopup: Error adding new process:', err);\n    }\n  };\n  // **📏 Dynamic Popup Sizing**\n  const popupHeight = Math.min(300 + lineItemProcesses.length * 40, 600); // Max height 600px\n  const popupWidth = Math.min(400 + lineItemProcesses.length * 20, 800); // Max width 800px\n\n  const handleSave = async () => {\n    try {\n      const encodedLineItemId = encodeURIComponent(lineItem.lineItemId);\n      console.log(`editpopup: Encoded lineItemId for save: ${encodedLineItemId}`);\n\n      // Extract unique processIds and vendorIds from lineItemProcesses\n      const updatedProcessIds = [...new Set(lineItemProcesses.map(p => p.processId))];\n      const updatedVendorIds = [...new Set(lineItemProcesses.map(p => p.vendorId))];\n      console.log(\"Updated Process IDs:\", updatedProcessIds);\n      console.log(\"Updated Vendor IDs:\", updatedVendorIds);\n\n      // Prepare the payload for saving reordered processes\n      const reorderedProcessesPayload = lineItemProcesses.map(process => ({\n        customId: process.customId,\n        sequence: process.sequence\n      }));\n      console.log(\"Saving reordered processes:\", reorderedProcessesPayload);\n      await reorderLineItemProcesses(encodedLineItemId, reorderedProcessesPayload);\n      console.log(\"editpopup: Saved reordered processes successfully!\");\n\n      // Fetch existing execution details to prevent duplicates\n      console.log(`editpopup: Saving execution details for lineItemId: ${lineItem.lineItemId}`);\n      const existingExecutions = await fetchExecutionDetailsForLineItem(lineItem.lineItemId);\n      const newExecutions = lineItemProcesses.map(process => {\n        const executionExists = existingExecutions.some(exec => exec.processId === process.processId && exec.vendorId === process.vendorId && exec.lineItemId === lineItem.lineItemId);\n        if (!executionExists) {\n          return {\n            lineItemId: lineItem.lineItemId,\n            orderId: lineItem.orderId,\n            processId: process.processId,\n            vendorId: process.vendorId,\n            outWeight: lineItem.weight || 0,\n            inWeight: 0,\n            dateSent: new Date().toISOString().split('T')[0],\n            dateReceived: null,\n            piecesSent: process.piecesSent !== undefined ? process.piecesSent : 1,\n            piecesReceived: 0,\n            status: 'Pending',\n            dateCreated: new Date().toISOString()\n          };\n        }\n        return null;\n      }).filter(Boolean);\n      for (const execution of newExecutions) {\n        console.log(\"✅ Sending Execution:\", execution);\n        await addExecutionDetails(execution);\n      }\n\n      // Update the parent component with new processIds and vendorIds\n      onSave({\n        ...lineItem,\n        processIds: updatedProcessIds,\n        vendorIds: updatedVendorIds\n      });\n      onClose();\n    } catch (err) {\n      console.error(\"editpopup: Error saving processes:\", err.message);\n    }\n  };\n  const handleExecutionSave = updatedExecution => {\n    setLineItemProcesses(prev => prev.map(process => process.processId === updatedExecution.processId && process.vendorId === updatedExecution.vendorId ? {\n      ...process,\n      ...updatedExecution\n    } : process));\n    setSelectedExecution(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        style: {\n          width: `${popupWidth}px`,\n          // Dynamic width\n          height: `${popupHeight}px`,\n          // Dynamic height\n          overflowY: \"auto\" // Scroll if too large\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Edit Line Item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n          sensors: sensors,\n          collisionDetection: closestCenter,\n          onDragEnd: handleDragEnd,\n          children: /*#__PURE__*/_jsxDEV(SortableContext, {\n            items: lineItemProcesses.map(process => process.customId),\n            strategy: verticalListSortingStrategy,\n            children: lineItemProcesses.map(process => {\n              const id = process.customId;\n              const validProcess = process && id;\n              return validProcess ? /*#__PURE__*/_jsxDEV(SortableItem, {\n                id: id,\n                process: process // Pass the entire process object\n              }, id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 17\n              }, this) : null;\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Add New Process\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: newProcess.processId,\n            onChange: e => setNewProcess(prev => ({\n              ...prev,\n              processId: e.target.value\n            })),\n            style: {\n              marginRight: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Process\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 13\n            }, this), filteredProcesses.map(process => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: process.processId,\n              children: process.processId\n            }, process.processId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: newProcess.vendorId,\n            onChange: e => setNewProcess(prev => ({\n              ...prev,\n              vendorId: e.target.value\n            })),\n            style: {\n              marginRight: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Vendor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 13\n            }, this), filteredVendors.map(vendor => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: vendor.vendorId,\n              children: vendor.vendorId\n            }, vendor.vendorId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddProcess,\n            style: {\n              padding: '5px 10px',\n              background: 'blue',\n              color: 'white'\n            },\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSave,\n            style: {\n              padding: '5px 10px',\n              background: 'green',\n              color: 'white'\n            },\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onClose,\n            style: {\n              padding: '5px 10px',\n              background: 'red',\n              color: 'white'\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), selectedExecution && /*#__PURE__*/_jsxDEV(ExecutionEditPopup, {\n      execution: selectedExecution,\n      onClose: () => setSelectedExecution(null),\n      onSave: handleExecutionSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 385,\n    columnNumber: 5\n  }, this);\n};\n_s2(EditPopup, \"MxLahMgbw7m+uerrXnhN5SeFLdo=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = EditPopup;\nexport default EditPopup;\nvar _c;\n$RefreshReg$(_c, \"EditPopup\");","map":{"version":3,"names":["React","useState","useEffect","fetchExecutionDetailsForLineItem","addExecutionDetails","fetchVendors","fetchProcesses","fetchLineItemProcesses","reorderLineItemProcesses","createLineItemProcess","deleteLineItemProcess","fetchAllVendorProcesses","DndContext","closestCenter","arrayMove","SortableContext","useSortable","sortableKeyboardCoordinates","verticalListSortingStrategy","ExecutionEditPopup","KeyboardSensor","PointerSensor","useSensor","useSensors","CSS","jsxDEV","_jsxDEV","EditPopup","lineItem","onClose","onSave","_s2","_s","$RefreshSig$","vendors","setVendors","processes","setProcesses","vendorProcesses","setVendorProcesses","lineItemProcesses","setLineItemProcesses","newProcess","setNewProcess","processId","vendorId","draggedProcess","setDraggedProcess","filteredVendors","setFilteredVendors","filteredProcesses","setFilteredProcesses","selectedExecution","setSelectedExecution","loadInitialData","encodedLineItemId","encodeURIComponent","lineItemId","console","log","vendorData","processData","lineItemProcessData","vendorProcessData","Array","isArray","error","forEach","item","index","_id","map","process","customId","sequence","err","message","allowedVendors","filter","vp","updatedVendors","v","includes","allowedProcesses","p","sensors","coordinateGetter","SortableItem","attributes","listeners","setNodeRef","transform","transition","id","disabled","handleRemove","e","stopPropagation","preventDefault","prev","handleEditExecution","executionDetails","execution","find","exec","warn","style","Transform","toString","padding","margin","background","border","borderRadius","display","justifyContent","alignItems","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","gap","onClick","onMouseDown","onTouchStart","color","cursor","handleDragEnd","event","active","over","items","oldIndex","findIndex","newIndex","updatedItems","handleAddProcess","newSequence","length","newCustomId","isDuplicate","some","newEntry","response","updatedProcesses","popupHeight","Math","min","popupWidth","handleSave","updatedProcessIds","Set","updatedVendorIds","reorderedProcessesPayload","existingExecutions","newExecutions","executionExists","orderId","outWeight","weight","inWeight","dateSent","Date","toISOString","split","dateReceived","piecesSent","undefined","piecesReceived","status","dateCreated","Boolean","processIds","vendorIds","handleExecutionSave","updatedExecution","className","width","height","overflowY","collisionDetection","onDragEnd","strategy","validProcess","marginTop","value","onChange","target","marginRight","vendor","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchExecutionDetailsForLineItem,addExecutionDetails,fetchVendors, fetchProcesses, fetchLineItemProcesses, reorderLineItemProcesses, createLineItemProcess, deleteLineItemProcess,fetchAllVendorProcesses } from '../services/api';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport ExecutionEditPopup from './ExecutionEditPopup'; // ✅ Import ExecutionEditPopup\nimport { KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\n\nconst EditPopup = ({ lineItem, onClose, onSave }) => {\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [vendorProcesses, setVendorProcesses] = useState([]); // Vendor-Process relationships\n  const [lineItemProcesses, setLineItemProcesses] = useState([]); // Existing LineItemProcesses\n  const [newProcess, setNewProcess] = useState({ processId: '', vendorId: '' });\n  const [draggedProcess, setDraggedProcess] = useState(null);\n  const [filteredVendors, setFilteredVendors] = useState([]); // Vendors filtered by process\n  const [filteredProcesses, setFilteredProcesses] = useState([]); // Processes filtered by vendor\n  const [selectedExecution, setSelectedExecution] = useState(null); // ✅ Execution to be edited\n\n\n  useEffect(() => {\n    // Fetch initial data for vendors, processes, and line item processes\n    const loadInitialData = async () => {\n      try {\n        const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n        console.log('editpopup: Encoded lineItemId:', encodedLineItemId);\n\n        // Fetch vendors\n        const vendorData = await fetchVendors();\n        console.log('editpopup: Fetched vendors:', vendorData);\n        setVendors(vendorData);\n\n        // Fetch processes\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n\n        // Fetch line item processes\n        const lineItemProcessData = await fetchLineItemProcesses(encodedLineItemId);\n        console.log('editpopup: Fetched line item processes:', lineItemProcessData);\n        console.log('Fetching initial data...');\n\n        const vendorProcessData = await fetchAllVendorProcesses();\n        console.log('Fetched all vendor-process mappings:', vendorProcessData);\n\n        if (!Array.isArray(vendorProcessData)) {\n          console.error('Invalid data format for vendorProcesses:', vendorProcessData);\n          return;\n        }\n\n        setVendorProcesses(vendorProcessData);\n        // Log each item in lineItemProcessData\n        lineItemProcessData.forEach((item, index) => {\n          console.log(`editpopup: Line item process ${index}:`, item);\n          console.log(`editpopup: Line item process ${index} _id:`, item._id);\n        });\n\n        setLineItemProcesses(\n          lineItemProcessData.map((process, index) => ({\n            ...process,\n            customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${process.sequence}`,\n          }))\n        );\n        //setVendorProcesses(vendorProcessData);\n      } catch (err) {\n        console.error('editpopup: Error loading initial data:', err.message);\n      }\n    };\n\n    if (lineItem.lineItemId) {\n      loadInitialData(); // Fetch data if lineItemId is available\n    }\n  }, [lineItem.lineItemId]);\n // Filter vendors based on selected process\n useEffect(() => {\n  console.log('Filtering vendors for processId:', newProcess.processId);\n  console.log('Current Vendor-Process mappings:', vendorProcesses);\n  console.log('Current Vendors:', vendors);\n\n  if (newProcess.processId) {\n    const allowedVendors = vendorProcesses\n      .filter(vp => vp.processId === newProcess.processId)\n      .map(vp => vp.vendorId);\n\n    console.log('Allowed Vendors:', allowedVendors);\n    const updatedVendors = vendors.filter(v => allowedVendors.includes(v.vendorId));\n    console.log('Filtered Vendors:', updatedVendors);\n    setFilteredVendors(updatedVendors);\n  } else {\n    setFilteredVendors(vendors);\n  }\n}, [newProcess.processId, vendors, vendorProcesses]);\n\nuseEffect(() => {\n  if (newProcess.vendorId) {\n    console.log('Filtering processes for vendorId:', newProcess.vendorId);\n    const allowedProcesses = vendorProcesses\n      .filter(vp => vp.vendorId === newProcess.vendorId)\n      .map(vp => vp.processId);\n\n    console.log('Allowed Processes:', allowedProcesses);\n    setFilteredProcesses(processes.filter(p => allowedProcesses.includes(p.processId)));\n  } else {\n    setFilteredProcesses(processes);\n  }\n}, [newProcess.vendorId, processes, vendorProcesses]);\n\n  // Sensors for drag-and-drop\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Sortable item component\n  const SortableItem = ({ process }) => {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ \n      id: process.customId, \n      disabled: false // 👈 Prevents buttons from triggering drag\n    });\n    \n  \n    const handleRemove = async (e) => {\n      e.stopPropagation(); // ✅ Prevent drag from triggering\n      e.preventDefault(); // ✅ Prevent unintended behavior\n      console.log(`🔴 Removing process: ${process.customId}`);\n      try {\n        await deleteLineItemProcess(lineItem.lineItemId, process.customId);\n        setLineItemProcesses(prev => prev.filter(item => item.customId !== process.customId));\n      } catch (err) {\n        console.error('Error removing process:', err);\n      }\n    };\n  \n    const handleEditExecution = async (e) => {\n      e.stopPropagation(); // ✅ Prevent drag from triggering\n      e.preventDefault(); // ✅ Prevent unintended behavior\n      console.log(`🟠 Editing Execution for Process: ${process.customId}`);\n      try {\n        const executionDetails = await fetchExecutionDetailsForLineItem(lineItem.lineItemId);\n        const execution = executionDetails.find(exec => exec.processId === process.processId && exec.vendorId === process.vendorId);\n    \n        if (execution) {\n          setSelectedExecution(execution);\n        } else {\n          console.warn(\"⚠️ No execution details found for this process\");\n        }\n      } catch (error) {\n        console.error('Error fetching execution details:', error);\n      }\n    };\n  \n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n      padding: '10px',\n      margin: '5px 0',\n      background: '#f8f8f8',\n      border: '1px solid #ddd',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    };\n  \n    return (\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <span>\n          Sequence: {process.sequence},\n          Process: {process.processId},\n          Vendor: {process.vendorId}\n        </span>\n        \n        {/* 🔥 Buttons Should Not Be Draggable */}\n        <div style={{ display: 'flex', gap: '10px' }}>\n          <button \n            onClick={handleEditExecution} \n            onMouseDown={(e) => e.stopPropagation()} // 👈 Fix: Prevent drag on button\n            onTouchStart={(e) => e.stopPropagation()} // 👈 Fix: Prevent touch drag\n            style={{ background: 'orange', color: 'white', cursor: 'pointer' }}\n          >\n            Edit\n          </button>\n          <button \n            onClick={handleRemove} \n            onMouseDown={(e) => e.stopPropagation()} \n            onTouchStart={(e) => e.stopPropagation()} \n            style={{ color: 'red', border: 'none', background: 'none', cursor: 'pointer' }}\n          >\n            Remove\n          </button>\n        </div>\n      </div>\n    );\n  };\n  \n  const handleDragEnd = (event) => {\n    if (!event || !event.active || !event.over) {\n      console.warn('handleDragEnd: Missing active or over:', event);\n      return;\n    }\n  \n    const { active, over } = event;\n    if (!active.id || !over.id) {\n      console.warn('handleDragEnd: Missing ID in active or over:', { active, over });\n      return;\n    }\n  \n    console.log(`handleDragEnd: Moving ${active.id} over ${over.id}`);\n  \n    setLineItemProcesses((items) => {\n      const oldIndex = items.findIndex((item) => item.customId === active.id);\n      const newIndex = items.findIndex((item) => item.customId === over.id);\n  \n      if (oldIndex === -1 || newIndex === -1) {\n        console.warn('handleDragEnd: Invalid indices:', { oldIndex, newIndex });\n        return items;\n      }\n  \n      const updatedItems = arrayMove(items, oldIndex, newIndex);\n  \n      return updatedItems.map((item, index) => ({\n        ...item,\n        sequence: index + 1,\n        customId: `${item.lineItemId}/${item.vendorId}/${item.processId}/${index + 1}`,\n      }));\n    });\n  };\n  \n\n  const handleAddProcess = async () => {\n    if (!newProcess.processId || !newProcess.vendorId) {\n      console.warn('editpopup: Please select both a process and a vendor before adding.');\n      return;\n    }\n  \n    try {\n      // Generate sequence number based on current processes count\n      const newSequence = lineItemProcesses.length + 1;\n  \n      // Create a unique custom ID\n      const newCustomId = `${lineItem.lineItemId}/${newProcess.vendorId}/${newProcess.processId}/${newSequence}`;\n  \n      // Check if the same process already exists\n      const isDuplicate = lineItemProcesses.some(item => item.customId === newCustomId);\n      if (isDuplicate) {\n        console.warn(`editpopup: Process with ID ${newCustomId} already exists.`);\n        return;\n      }\n  \n      const newEntry = {\n        lineItemId: lineItem.lineItemId,\n        processId: newProcess.processId,\n        vendorId: newProcess.vendorId,\n        sequence: newSequence,\n        customId: newCustomId,\n      };\n  \n      console.log('editpopup: Sending new process to backend:', newEntry);\n  \n      // Save to backend and capture response\n      const response = await createLineItemProcess(newEntry);\n  \n      if (!response || response.error) {\n        console.error('editpopup: Backend error:', response?.error || 'Unknown error');\n        return;\n      }\n  \n      console.log('editpopup: Process successfully added:', response);\n  \n      // Fetch latest processes instead of appending manually (prevents stale data issues)\n      const updatedProcesses = await fetchLineItemProcesses(encodeURIComponent(lineItem.lineItemId));\n  \n      // Update state with the newly fetched list\n      setLineItemProcesses(\n        updatedProcesses.map((process, index) => ({\n          ...process,\n          sequence: index + 1, // Ensure correct sequence\n          customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${index + 1}`,\n        }))\n      );\n  \n      console.log('editpopup: Updated lineItemProcesses after addition:', updatedProcesses);\n  \n      // Reset form input\n      setNewProcess({ processId: '', vendorId: '' });\n  \n    } catch (err) {\n      console.error('editpopup: Error adding new process:', err);\n    }\n  };\n  // **📏 Dynamic Popup Sizing**\n  const popupHeight = Math.min(300 + lineItemProcesses.length * 40, 600); // Max height 600px\n  const popupWidth = Math.min(400 + lineItemProcesses.length * 20, 800); // Max width 800px\n\n  const handleSave = async () => {\n    try {\n      const encodedLineItemId = encodeURIComponent(lineItem.lineItemId);\n      console.log(`editpopup: Encoded lineItemId for save: ${encodedLineItemId}`);\n  \n      // Extract unique processIds and vendorIds from lineItemProcesses\n      const updatedProcessIds = [...new Set(lineItemProcesses.map(p => p.processId))];\n      const updatedVendorIds = [...new Set(lineItemProcesses.map(p => p.vendorId))];\n  \n      console.log(\"Updated Process IDs:\", updatedProcessIds);\n      console.log(\"Updated Vendor IDs:\", updatedVendorIds);\n  \n      // Prepare the payload for saving reordered processes\n      const reorderedProcessesPayload = lineItemProcesses.map((process) => ({\n        customId: process.customId,\n        sequence: process.sequence,\n      }));\n  \n      console.log(\"Saving reordered processes:\", reorderedProcessesPayload);\n      await reorderLineItemProcesses(encodedLineItemId, reorderedProcessesPayload);\n      console.log(\"editpopup: Saved reordered processes successfully!\");\n  \n      // Fetch existing execution details to prevent duplicates\n      console.log(`editpopup: Saving execution details for lineItemId: ${lineItem.lineItemId}`);\n      const existingExecutions = await fetchExecutionDetailsForLineItem(lineItem.lineItemId);\n  \n      const newExecutions = lineItemProcesses.map((process) => {\n        const executionExists = existingExecutions.some(exec =>\n          exec.processId === process.processId &&\n          exec.vendorId === process.vendorId &&\n          exec.lineItemId === lineItem.lineItemId\n        );\n  \n        if (!executionExists) {\n          return {\n            lineItemId: lineItem.lineItemId,\n            orderId: lineItem.orderId,\n            processId: process.processId,\n            vendorId: process.vendorId,\n            outWeight: lineItem.weight || 0,\n            inWeight: 0,\n            dateSent: new Date().toISOString().split('T')[0],\n            dateReceived: null,\n            piecesSent: process.piecesSent !== undefined ? process.piecesSent : 1,\n            piecesReceived: 0,\n            status: 'Pending',\n            dateCreated: new Date().toISOString(),\n          };\n        }\n        return null;\n      }).filter(Boolean);\n  \n      for (const execution of newExecutions) {\n        console.log(\"✅ Sending Execution:\", execution);\n        await addExecutionDetails(execution);\n      }\n  \n      // Update the parent component with new processIds and vendorIds\n      onSave({\n        ...lineItem,\n        processIds: updatedProcessIds,\n        vendorIds: updatedVendorIds,\n      });\n  \n      onClose();\n    } catch (err) {\n      console.error(\"editpopup: Error saving processes:\", err.message);\n    }\n  };\n  \n  const handleExecutionSave = (updatedExecution) => {\n    setLineItemProcesses(prev =>\n      prev.map(process =>\n        process.processId === updatedExecution.processId && process.vendorId === updatedExecution.vendorId\n          ? { ...process, ...updatedExecution }\n          : process\n      )\n    );\n    setSelectedExecution(null);\n  };\n  \n  return (\n    <div className=\"popup\">\n      <div className=\"popup-overlay\">\n      <div\n        className=\"popup-content\"\n        style={{\n          width: `${popupWidth}px`,  // Dynamic width\n          height: `${popupHeight}px`, // Dynamic height\n          overflowY: \"auto\", // Scroll if too large\n        }}\n      >\n        <h2>Edit Line Item</h2>\n\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragEnd={handleDragEnd}\n        >\n          <SortableContext\n            items={lineItemProcesses.map(process => process.customId)}\n            strategy={verticalListSortingStrategy}\n          >\n            {lineItemProcesses.map((process) => {\n              const id = process.customId;\n              const validProcess = process && id;\n\n              return validProcess ? (\n                <SortableItem\n                  key={id}\n                  id={id}\n                  process={process} // Pass the entire process object\n                />\n              ) : null;\n            })}\n          </SortableContext>\n        </DndContext>\n\n        <div style={{ marginTop: '20px' }}>\n          <h3>Add New Process</h3>\n          <select\n            value={newProcess.processId}\n            onChange={(e) => setNewProcess((prev) => ({ ...prev, processId: e.target.value }))}\n            style={{ marginRight: '10px' }}\n          >\n            <option value=\"\">Select Process</option>\n            {filteredProcesses.map((process) => (\n              <option key={process.processId} value={process.processId}>\n                {process.processId}\n              </option>\n            ))}\n          </select>\n          <select\n            value={newProcess.vendorId}\n            onChange={(e) => setNewProcess((prev) => ({ ...prev, vendorId: e.target.value }))}\n            style={{ marginRight: '10px' }}\n          >\n            <option value=\"\">Select Vendor</option>\n            {filteredVendors.map((vendor) => (\n              <option key={vendor.vendorId} value={vendor.vendorId}>\n                {vendor.vendorId}\n              </option>\n            ))}\n          </select>\n          <button onClick={handleAddProcess} style={{ padding: '5px 10px', background: 'blue', color: 'white' }}>\n            Add\n          </button>\n        </div>\n\n        <div style={{ marginTop: '20px' }}>\n          <button onClick={handleSave} style={{ padding: '5px 10px', background: 'green', color: 'white' }}>\n            Save\n          </button>\n          <button onClick={onClose} style={{ padding: '5px 10px', background: 'red', color: 'white' }}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n    {selectedExecution && <ExecutionEditPopup execution={selectedExecution} onClose={() => setSelectedExecution(null)} onSave={handleExecutionSave} />}\n\n    </div>\n  );\n};\n\nexport default EditPopup;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}