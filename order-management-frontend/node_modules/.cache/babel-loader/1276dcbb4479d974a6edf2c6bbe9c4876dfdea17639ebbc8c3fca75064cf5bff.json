{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchVendors, fetchProcesses, fetchLineItemProcesses, reorderLineItemProcesses, createLineItemProcess, deleteLineItemProcess } from '../services/api';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, useSortable, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPopup = ({\n  lineItem,\n  onClose,\n  onSave\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [lineItemProcesses, setLineItemProcesses] = useState([]); // Existing LineItemProcesses\n  const [newProcess, setNewProcess] = useState({\n    processId: '',\n    vendorId: ''\n  });\n  const [draggedProcess, setDraggedProcess] = useState(null);\n  useEffect(() => {\n    // Fetch initial data for vendors, processes, and line item processes\n    const loadInitialData = async () => {\n      try {\n        const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n        console.log('editpopup: Encoded lineItemId:', encodedLineItemId);\n\n        // Fetch vendors\n        const vendorData = await fetchVendors();\n        console.log('editpopup: Fetched vendors:', vendorData);\n        setVendors(vendorData);\n\n        // Fetch processes\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n\n        // Fetch line item processes\n        const lineItemProcessData = await fetchLineItemProcesses(encodedLineItemId);\n        console.log('editpopup: Fetched line item processes:', lineItemProcessData);\n\n        // Log each item in lineItemProcessData\n        lineItemProcessData.forEach((item, index) => {\n          console.log(`editpopup: Line item process ${index}:`, item);\n          console.log(`editpopup: Line item process ${index} _id:`, item._id);\n        });\n        setLineItemProcesses(lineItemProcessData.map((process, index) => {\n          var _process$_id;\n          return {\n            ...process,\n            _id: ((_process$_id = process._id) === null || _process$_id === void 0 ? void 0 : _process$_id.$oid) || `process-${index}` // Extract the $oid property if it exists\n          };\n        }));\n      } catch (err) {\n        console.error('editpopup: Error loading initial data:', err.message);\n      }\n    };\n    if (lineItem.lineItemId) {\n      loadInitialData(); // Fetch data if lineItemId is available\n    }\n  }, [lineItem.lineItemId]);\n\n  // Sensors for drag-and-drop\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n\n  // Sortable item component\n  const SortableItem = ({\n    id,\n    process\n  }) => {\n    _s();\n    const {\n      attributes,\n      listeners,\n      setNodeRef,\n      transform,\n      transition\n    } = useSortable({\n      id: id\n    });\n    if (!id || !process) {\n      console.error('SortableItem received undefined id or process:', {\n        id,\n        process\n      });\n      return null;\n    }\n    const handleRemove = async e => {\n      e.stopPropagation(); // Prevent drag event from triggering\n      try {\n        // Make sure we have both IDs\n        if (!lineItem.lineItemId || !process._id) {\n          console.error('Missing required IDs for deletion');\n          return;\n        }\n        console.log('Removing process:', {\n          lineItemId: lineItem.lineItemId,\n          processId: process._id\n        });\n\n        // Call delete API with the correct IDs\n        await deleteLineItemProcess(lineItem.lineItemId, process._id);\n\n        // Update state after successful deletion\n        setLineItemProcesses(prev => prev.filter(item => item._id !== process._id));\n      } catch (err) {\n        console.error('Error removing process:', err);\n      }\n    };\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n      padding: '10px',\n      margin: '5px 0',\n      background: '#f8f8f8',\n      border: '1px solid #ddd',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Sequence: \", process.sequence, \", Process: \", process.processId, \", Vendor: \", process.vendorId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRemove,\n        style: {\n          marginLeft: '10px',\n          color: 'red',\n          border: 'none',\n          background: 'none',\n          cursor: 'pointer'\n        },\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  };\n  _s(SortableItem, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n    return [useSortable];\n  });\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n\n    // Ensure both active and over are defined\n    if (!active || !over) {\n      console.warn('Drag event missing active or over:', {\n        active,\n        over\n      });\n      return;\n    }\n\n    // Check if active and over have valid IDs\n    if (!active.id || !over.id) {\n      console.warn('Active or Over missing ID:', {\n        active,\n        over\n      });\n      return;\n    }\n    if (active.id !== over.id) {\n      setLineItemProcesses(items => {\n        const oldIndex = items.findIndex(item => item._id == active.id);\n        const newIndex = items.findIndex(item => item._id == over.id);\n        if (oldIndex == -1 || newIndex == -1) {\n          console.warn('Invalid indices during drag-and-drop:', {\n            oldIndex,\n            newIndex\n          });\n          return items;\n        }\n        const updatedItems = arrayMove(items, oldIndex, newIndex);\n\n        // Update sequence numbers after reordering\n        return updatedItems.map((item, index) => ({\n          ...item,\n          sequence: index + 1\n        }));\n      });\n    }\n  };\n  const handleAddProcess = async () => {\n    if (newProcess.processId && newProcess.vendorId) {\n      const newEntry = {\n        lineItemId: lineItem.lineItemId,\n        // Pass the lineItemId for association\n        processId: newProcess.processId,\n        vendorId: newProcess.vendorId,\n        sequence: lineItemProcesses.length + 1\n      };\n      console.log('editpopup: New process to add:', newEntry);\n      try {\n        await createLineItemProcess(newEntry); // Save to backend\n        console.log('editpopup: Added new process');\n\n        // Refetch processes to ensure data is consistent\n        const updatedProcesses = await fetchLineItemProcesses(encodeURIComponent(lineItem.lineItemId));\n        setLineItemProcesses(updatedProcesses.map((process, index) => {\n          var _process$_id2;\n          return {\n            ...process,\n            _id: ((_process$_id2 = process._id) === null || _process$_id2 === void 0 ? void 0 : _process$_id2.$oid) || `process-${index}` // Extract the $oid property if it exists\n          };\n        }));\n        setNewProcess({\n          processId: '',\n          vendorId: ''\n        }); // Reset the input fields\n      } catch (err) {\n        console.error('editpopup: Error adding new process:', err.message);\n      }\n    }\n  };\n  const handleSave = async () => {\n    try {\n      const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n      console.log(`editpopup: Encoded lineItemId for save: ${encodedLineItemId}`);\n\n      // Save reordered processes to backend\n      const reorderedProcessesPayload = lineItemProcesses.map(process => ({\n        lineItemProcessId: process._id,\n        // Ensure this matches the backend field\n        sequence: process.sequence\n      }));\n      await reorderLineItemProcesses(encodedLineItemId, reorderedProcessesPayload);\n      console.log('editpopup: Saved reordered processes:', lineItemProcesses);\n\n      // Refetch updated processes to ensure the latest data is shown\n      const updatedProcesses = await fetchLineItemProcesses(encodedLineItemId);\n      setLineItemProcesses(updatedProcesses.map((process, index) => {\n        var _process$_id3;\n        return {\n          ...process,\n          _id: ((_process$_id3 = process._id) === null || _process$_id3 === void 0 ? void 0 : _process$_id3.$oid) || `process-${index}` // Extract the $oid property if it exists\n        };\n      }));\n      const processIds = updatedProcesses.map(item => item.processId);\n      const vendorIds = updatedProcesses.map(item => item.vendorId);\n      console.log('Saving with:', {\n        processIds,\n        vendorIds,\n        lineItemProcesses\n      });\n      onSave({\n        ...lineItem,\n        processIds,\n        vendorIds,\n        lineItemProcesses: updatedProcesses\n      });\n    } catch (err) {\n      console.error('editpopup: Error saving processes:', err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Line Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n        sensors: sensors,\n        collisionDetection: closestCenter,\n        onDragEnd: handleDragEnd,\n        children: /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: lineItemProcesses.map(process => process._id),\n          strategy: verticalListSortingStrategy,\n          children: lineItemProcesses.map(process => {\n            const id = process._id;\n            const validProcess = process && id;\n            return validProcess ? /*#__PURE__*/_jsxDEV(SortableItem, {\n              id: id,\n              process: process // Pass the entire process object\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this) : null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add New Process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newProcess.processId,\n          onChange: e => setNewProcess(prev => ({\n            ...prev,\n            processId: e.target.value\n          })),\n          style: {\n            marginRight: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Process\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), processes.map(process => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: process.processId,\n            children: process.processId\n          }, process.processId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newProcess.vendorId,\n          onChange: e => setNewProcess(prev => ({\n            ...prev,\n            vendorId: e.target.value\n          })),\n          style: {\n            marginRight: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Vendor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), vendors.map(vendor => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: vendor.vendorId,\n            children: vendor.vendorId\n          }, vendor.vendorId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddProcess,\n          style: {\n            padding: '5px 10px',\n            background: 'blue',\n            color: 'white'\n          },\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSave,\n          style: {\n            padding: '5px 10px',\n            background: 'green',\n            color: 'white'\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          style: {\n            padding: '5px 10px',\n            background: 'red',\n            color: 'white'\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s2(EditPopup, \"W+PxwCVPXgz2174vp/rBwsL3Xr0=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = EditPopup;\nexport default EditPopup;\nvar _c;\n$RefreshReg$(_c, \"EditPopup\");","map":{"version":3,"names":["React","useState","useEffect","fetchVendors","fetchProcesses","fetchLineItemProcesses","reorderLineItemProcesses","createLineItemProcess","deleteLineItemProcess","DndContext","closestCenter","arrayMove","SortableContext","useSortable","sortableKeyboardCoordinates","verticalListSortingStrategy","KeyboardSensor","PointerSensor","useSensor","useSensors","CSS","jsxDEV","_jsxDEV","EditPopup","lineItem","onClose","onSave","_s2","_s","$RefreshSig$","vendors","setVendors","processes","setProcesses","lineItemProcesses","setLineItemProcesses","newProcess","setNewProcess","processId","vendorId","draggedProcess","setDraggedProcess","loadInitialData","encodedLineItemId","encodeURIComponent","lineItemId","console","log","vendorData","processData","lineItemProcessData","forEach","item","index","_id","map","process","_process$_id","$oid","err","error","message","sensors","coordinateGetter","SortableItem","id","attributes","listeners","setNodeRef","transform","transition","handleRemove","e","stopPropagation","prev","filter","style","Transform","toString","padding","margin","background","border","borderRadius","display","justifyContent","alignItems","ref","children","sequence","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginLeft","color","cursor","handleDragEnd","event","active","over","warn","items","oldIndex","findIndex","newIndex","updatedItems","handleAddProcess","newEntry","length","updatedProcesses","_process$_id2","handleSave","reorderedProcessesPayload","lineItemProcessId","_process$_id3","processIds","vendorIds","className","collisionDetection","onDragEnd","strategy","validProcess","marginTop","value","onChange","target","marginRight","vendor","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchVendors, fetchProcesses, fetchLineItemProcesses, reorderLineItemProcesses, createLineItemProcess, deleteLineItemProcess } from '../services/api';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\n\nconst EditPopup = ({ lineItem, onClose, onSave }) => {\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [lineItemProcesses, setLineItemProcesses] = useState([]); // Existing LineItemProcesses\n  const [newProcess, setNewProcess] = useState({ processId: '', vendorId: '' });\n  const [draggedProcess, setDraggedProcess] = useState(null);\n\n  useEffect(() => {\n    // Fetch initial data for vendors, processes, and line item processes\n    const loadInitialData = async () => {\n      try {\n        const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n        console.log('editpopup: Encoded lineItemId:', encodedLineItemId);\n\n        // Fetch vendors\n        const vendorData = await fetchVendors();\n        console.log('editpopup: Fetched vendors:', vendorData);\n        setVendors(vendorData);\n\n        // Fetch processes\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n\n        // Fetch line item processes\n        const lineItemProcessData = await fetchLineItemProcesses(encodedLineItemId);\n        console.log('editpopup: Fetched line item processes:', lineItemProcessData);\n\n        // Log each item in lineItemProcessData\n        lineItemProcessData.forEach((item, index) => {\n          console.log(`editpopup: Line item process ${index}:`, item);\n          console.log(`editpopup: Line item process ${index} _id:`, item._id);\n        });\n\n        setLineItemProcesses(\n          lineItemProcessData.map((process, index) => ({\n            ...process,\n            _id: process._id?.$oid || `process-${index}`, // Extract the $oid property if it exists\n          }))\n        );\n      } catch (err) {\n        console.error('editpopup: Error loading initial data:', err.message);\n      }\n    };\n\n    if (lineItem.lineItemId) {\n      loadInitialData(); // Fetch data if lineItemId is available\n    }\n  }, [lineItem.lineItemId]);\n\n  // Sensors for drag-and-drop\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Sortable item component\n  const SortableItem = ({ id, process }) => {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({\n      id: id\n    });\n\n    if (!id || !process) {\n      console.error('SortableItem received undefined id or process:', { id, process });\n      return null;\n    }\n\n    const handleRemove = async (e) => {\n      e.stopPropagation(); // Prevent drag event from triggering\n      try {\n        // Make sure we have both IDs\n        if (!lineItem.lineItemId || !process._id) {\n          console.error('Missing required IDs for deletion');\n          return;\n        }\n\n        console.log('Removing process:', {\n          lineItemId: lineItem.lineItemId,\n          processId: process._id\n        });\n\n        // Call delete API with the correct IDs\n        await deleteLineItemProcess(lineItem.lineItemId, process._id);\n\n        // Update state after successful deletion\n        setLineItemProcesses(prev =>\n          prev.filter(item => item._id !== process._id)\n        );\n      } catch (err) {\n        console.error('Error removing process:', err);\n      }\n    };\n\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n      padding: '10px',\n      margin: '5px 0',\n      background: '#f8f8f8',\n      border: '1px solid #ddd',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    };\n\n    return (\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <span>\n          Sequence: {process.sequence},\n          Process: {process.processId},\n          Vendor: {process.vendorId}\n        </span>\n        <button\n          onClick={handleRemove}\n          style={{\n            marginLeft: '10px',\n            color: 'red',\n            border: 'none',\n            background: 'none',\n            cursor: 'pointer',\n          }}\n        >\n          Remove\n        </button>\n      </div>\n    );\n  };\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    // Ensure both active and over are defined\n    if (!active || !over) {\n      console.warn('Drag event missing active or over:', { active, over });\n      return;\n    }\n\n    // Check if active and over have valid IDs\n    if (!active.id || !over.id) {\n      console.warn('Active or Over missing ID:', { active, over });\n      return;\n    }\n\n    if (active.id !== over.id) {\n      setLineItemProcesses((items) => {\n        const oldIndex = items.findIndex((item) => item._id == active.id);\n        const newIndex = items.findIndex((item) => item._id == over.id);\n\n        if (oldIndex == -1 || newIndex == -1) {\n          console.warn('Invalid indices during drag-and-drop:', { oldIndex, newIndex });\n          return items;\n        }\n\n        const updatedItems = arrayMove(items, oldIndex, newIndex);\n\n        // Update sequence numbers after reordering\n        return updatedItems.map((item, index) => ({\n          ...item,\n          sequence: index + 1,\n        }));\n      });\n    }\n  };\n\n  const handleAddProcess = async () => {\n    if (newProcess.processId && newProcess.vendorId) {\n      const newEntry = {\n        lineItemId: lineItem.lineItemId, // Pass the lineItemId for association\n        processId: newProcess.processId,\n        vendorId: newProcess.vendorId,\n        sequence: lineItemProcesses.length + 1,\n      };\n      console.log('editpopup: New process to add:', newEntry);\n\n      try {\n        await createLineItemProcess(newEntry); // Save to backend\n        console.log('editpopup: Added new process');\n\n        // Refetch processes to ensure data is consistent\n        const updatedProcesses = await fetchLineItemProcesses(encodeURIComponent(lineItem.lineItemId));\n        setLineItemProcesses(\n          updatedProcesses.map((process, index) => ({\n            ...process,\n            _id: process._id?.$oid || `process-${index}`, // Extract the $oid property if it exists\n          }))\n        );\n        setNewProcess({ processId: '', vendorId: '' }); // Reset the input fields\n      } catch (err) {\n        console.error('editpopup: Error adding new process:', err.message);\n      }\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n      console.log(`editpopup: Encoded lineItemId for save: ${encodedLineItemId}`);\n\n      // Save reordered processes to backend\n      const reorderedProcessesPayload = lineItemProcesses.map((process) => ({\n        lineItemProcessId: process._id, // Ensure this matches the backend field\n        sequence: process.sequence,\n      }));\n      await reorderLineItemProcesses(encodedLineItemId, reorderedProcessesPayload);\n\n      console.log('editpopup: Saved reordered processes:', lineItemProcesses);\n\n      // Refetch updated processes to ensure the latest data is shown\n      const updatedProcesses = await fetchLineItemProcesses(encodedLineItemId);\n      setLineItemProcesses(\n        updatedProcesses.map((process, index) => ({\n          ...process,\n          _id: process._id?.$oid || `process-${index}`, // Extract the $oid property if it exists\n        }))\n      );\n\n      const processIds = updatedProcesses.map((item) => item.processId);\n      const vendorIds = updatedProcesses.map((item) => item.vendorId);\n\n      console.log('Saving with:', { processIds, vendorIds, lineItemProcesses });\n      onSave({ ...lineItem, processIds, vendorIds, lineItemProcesses: updatedProcesses });\n    } catch (err) {\n      console.error('editpopup: Error saving processes:', err.message);\n    }\n  };\n\n  return (\n    <div className=\"popup\">\n      <div className=\"popup-content\">\n        <h2>Edit Line Item</h2>\n\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragEnd={handleDragEnd}\n        >\n          <SortableContext\n            items={lineItemProcesses.map(process => process._id)}\n            strategy={verticalListSortingStrategy}\n          >\n            {lineItemProcesses.map((process) => {\n              const id = process._id;\n              const validProcess = process && id;\n\n              return validProcess ? (\n                <SortableItem\n                  key={id}\n                  id={id}\n                  process={process} // Pass the entire process object\n                />\n              ) : null;\n            })}\n          </SortableContext>\n        </DndContext>\n\n        <div style={{ marginTop: '20px' }}>\n          <h3>Add New Process</h3>\n          <select\n            value={newProcess.processId}\n            onChange={(e) => setNewProcess((prev) => ({ ...prev, processId: e.target.value }))}\n            style={{ marginRight: '10px' }}\n          >\n            <option value=\"\">Select Process</option>\n            {processes.map((process) => (\n              <option key={process.processId} value={process.processId}>\n                {process.processId}\n              </option>\n            ))}\n          </select>\n          <select\n            value={newProcess.vendorId}\n            onChange={(e) => setNewProcess((prev) => ({ ...prev, vendorId: e.target.value }))}\n            style={{ marginRight: '10px' }}\n          >\n            <option value=\"\">Select Vendor</option>\n            {vendors.map((vendor) => (\n              <option key={vendor.vendorId} value={vendor.vendorId}>\n                {vendor.vendorId}\n              </option>\n            ))}\n          </select>\n          <button onClick={handleAddProcess} style={{ padding: '5px 10px', background: 'blue', color: 'white' }}>\n            Add\n          </button>\n        </div>\n\n        <div style={{ marginTop: '20px' }}>\n          <button onClick={handleSave} style={{ padding: '5px 10px', background: 'green', color: 'white' }}>\n            Save\n          </button>\n          <button onClick={onClose} style={{ padding: '5px 10px', background: 'red', color: 'white' }}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EditPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}