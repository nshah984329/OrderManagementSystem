{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/OrderDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Select from 'react-select';\nimport axios from 'axios';\nimport { useCallback } from 'react';\nimport { fetchOrder, fetchLineItems, fetchProcesses, fetchVendors, fetchShapes, fetchGrades, createLineItem, editLineitem, deleteLineItem } from '../services/api';\nimport EditPopup from './EditPopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [order, setOrder] = useState(null);\n  const [lineItems, setLineItems] = useState([]);\n  const [fetchedLineItems, setfetchedLineItems] = useState([]);\n  const [nextLineItemId, setNextLineItemId] = useState(''); // Next available lineItemId\n  const [processes, setProcesses] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [shapes, setShapes] = useState([]);\n  const [grades, setGrades] = useState([]);\n  const allPossibleDimensions = ['length', 'breadth', 'thickness', 'diameter'];\n  const shapeDimensionMap = {\n    'Sheet': ['length', 'breadth', 'thickness'],\n    'round bar': ['diameter', 'length'],\n    'square bar': ['thickness', 'length'],\n    'hexagon bar': ['thickness', 'length'],\n    'flat bar': ['length', 'breadth', 'thickness']\n  };\n  const [newLineItem, setNewLineItem] = useState({\n    shape: '',\n    grade: '',\n    dimensions: {\n      length: '',\n      breadth: '',\n      thickness: '',\n      diameter: ''\n    },\n    quantity: '',\n    weight: '',\n    processIds: [],\n    vendorIds: []\n  });\n  const [density, setDensity] = useState(0);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    const loadOrderData = async () => {\n      try {\n        const orderData = await fetchOrder(id);\n        console.log('Fetched Order:', orderData);\n        setOrder(orderData);\n        const lineItemData = await fetchLineItems(id);\n        console.log('Fetched Line Items:', lineItemData);\n        setLineItems(lineItemData);\n        setfetchedLineItems(lineItemData.data);\n        const {\n          data\n        } = await axios.get(`https://munani.onrender.comapi/lineitems/nextLineItemId/${id}`);\n        setNextLineItemId(data.nextLineItemId);\n      } catch (err) {\n        console.error('Error fetching data:', err.message);\n        setMessage('Failed to load data.');\n      }\n    };\n    loadOrderData();\n  }, [id]);\n  const fetchShapesOnClick = async () => {\n    if (shapes.length > 0) return;\n    try {\n      const shapeData = await fetchShapes();\n      setShapes(shapeData);\n    } catch (err) {\n      console.error('Error fetching shapes:', err.message);\n    }\n  };\n  const fetchGradesOnClick = async () => {\n    if (grades.length > 0) return;\n    try {\n      const gradeData = await fetchGrades();\n      setGrades(gradeData);\n    } catch (err) {\n      console.error('Error fetching grades:', err.message);\n    }\n  };\n  const fetchVendorsOnClick = async () => {\n    if (vendors.length > 0) return;\n    try {\n      const vendorData = await fetchVendors();\n      setVendors(vendorData);\n    } catch (err) {\n      console.error('Error fetching vendors:', err.message);\n    }\n  };\n  const fetchProcessesOnClick = async () => {\n    if (processes.length > 0) return;\n    try {\n      const processData = await fetchProcesses();\n      setProcesses(processData);\n    } catch (err) {\n      console.error('Error fetching processes:', err.message);\n    }\n  };\n  const fetchLineItemsForOrder = async () => {\n    try {\n      const lineItemData = await fetchLineItems(order.orderId);\n      setfetchedLineItems(lineItemData.data);\n      console.log(\"fetched Lineitems Again: \", fetchedLineItems);\n    } catch (err) {\n      console.error('Error fetching updated line items:', err.message);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    // Validate and log the dimensions\n    const {\n      dimensions\n    } = newLineItem;\n    console.log('Submitting Dimensions:', dimensions);\n    const updatedDimensions = {};\n    allPossibleDimensions.forEach(dimension => {\n      updatedDimensions[dimension] = dimensions[dimension] || null;\n    });\n    // Check if all dimensions are numbers or null\n    const allValid = Object.values(updatedDimensions).every(value => value === null || typeof value === 'number');\n    if (!allValid) {\n      console.error('Invalid dimensions:', updatedDimensions);\n      setMessage('Please provide valid numeric dimensions.');\n      return;\n    }\n    console.log('Submitting Line Item:', {\n      ...newLineItem,\n      orderId: id,\n      lineItemId: nextLineItemId,\n      dimensions: updatedDimensions\n    });\n    try {\n      const response = await createLineItem({\n        ...newLineItem,\n        orderId: id,\n        lineItemId: nextLineItemId,\n        dimensions: updatedDimensions\n      });\n      console.log('Line Item Created:', response);\n      setMessage('Line item added successfully!');\n      fetchLineItemsForOrder();\n      setLineItems(prev => Array.isArray(prev) ? [...prev, response] : [response]);\n      setNewLineItem({\n        shape: '',\n        grade: '',\n        dimensions: {\n          length: updatedDimensions.length,\n          breadth: updatedDimensions.breadth,\n          thickness: updatedDimensions.thickness,\n          diameter: updatedDimensions.diameter\n        },\n        quantity: '',\n        weight: '',\n        processIds: [],\n        vendorIds: []\n      });\n      const lineItemData = await fetchLineItems(id);\n      setLineItems(lineItemData);\n      // Fetch next lineItemId for subsequent additions\n      const {\n        data\n      } = await axios.get(`https://munani.onrender.com/api/lineitems/nextLineItemId/${id}`);\n      setNextLineItemId(data.nextLineItemId);\n    } catch (err) {\n      var _err$response;\n      console.error('Failed to add line item:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      setMessage('Failed to add line item.');\n    }\n  };\n  const calculateWeight = useCallback(() => {\n    const {\n      shape,\n      dimensions,\n      quantity\n    } = newLineItem;\n    const {\n      length,\n      breadth,\n      thickness,\n      diameter\n    } = dimensions;\n    if (!shape || !density || !quantity || quantity <= 0) {\n      return {\n        totalWeight: '',\n        weightPerUnit: ''\n      }; // Return empty if missing key data\n    }\n    let volume = 0;\n    if (shape === 'round bar') {\n      if (diameter && length) {\n        volume = Math.PI * Math.pow(diameter / 2, 2) * length; // Volume of a cylinder\n      }\n    } else if (shape === 'Sheet' || shape === 'flat bar') {\n      if (length && breadth && thickness) {\n        volume = length * breadth * thickness; // Volume of a rectangular block\n      }\n    } else if (shape === 'square bar') {\n      if (thickness && length) {\n        volume = Math.pow(thickness, 2) * length; // Volume of a square cross-section bar\n      }\n    } else if (shape === 'hexagon bar') {\n      if (thickness && length) {\n        const area = 3 * Math.sqrt(3) * Math.pow(thickness / 2, 2) / 2; // Area of hexagon\n        volume = area * length; // Volume of hexagonal prism\n      }\n    }\n    const totalWeight = volume * density * quantity * 0.000001; // Multiply by quantity\n    const weightPerUnit = totalWeight / quantity; // Divide totalWeight by quantity\n\n    return {\n      totalWeight: isNaN(totalWeight) ? '' : totalWeight.toFixed(2),\n      weightPerUnit: isNaN(weightPerUnit) ? '' : weightPerUnit.toFixed(2)\n    };\n  }, [newLineItem, density]); // Dependencies for useCallback\n\n  const fetchDensity = async selectedGrade => {\n    const grade = grades.find(g => g.grade === selectedGrade);\n    return grade ? grade.density : 0; // Return 0 if no matching grade\n  };\n  const handleDropdownChange = async e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'grade') {\n      const fetchedDensity = await fetchDensity(value);\n      setDensity(fetchedDensity);\n      setNewLineItem(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    } else {\n      setNewLineItem(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n  const [editingLineItem, setEditingLineItem] = useState(null); // Line item to edit\n  const [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // Whether popup is open\n\n  const handleEditLineItem = item => {\n    setEditingLineItem(item); // Set the line item being edited\n    setIsEditPopupOpen(true); // Open the popup\n  };\n  const handleDeleteLineItem = async lineItemId => {\n    try {\n      // Confirm deletion\n      if (!window.confirm('Are you sure you want to delete this line item?')) {\n        return; // Exit if user cancels\n      }\n\n      // Call the delete API\n      const response = await deleteLineItem(encodeURIComponent(lineItemId));\n      console.log('Line Item Deleted:', response.data);\n\n      // Refresh the list of line items after deletion\n      await fetchLineItemsForOrder();\n\n      // Show success message\n      setMessage(`✅ Line item ${lineItemId} deleted successfully!`);\n    } catch (err) {\n      var _err$response2;\n      console.error('❌ Error deleting line item:', ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n      setMessage('❌ Failed to delete line item.');\n    }\n  };\n  const handleUpdateLineItem = async updatedLineItem => {\n    try {\n      console.log('Update button clicked:', updatedLineItem);\n\n      // Validate data\n      if (!Array.isArray(updatedLineItem.processIds) || !Array.isArray(updatedLineItem.vendorIds)) {\n        throw new Error('processIds and vendorIds must be arrays.');\n      }\n      console.log('processIds:', updatedLineItem.processIds);\n      console.log('vendorIds:', updatedLineItem.vendorIds);\n\n      // Encode the lineItemId once\n      const encodedLineItemId = encodeURIComponent(updatedLineItem.lineItemId);\n      console.log('Encoded Line Item ID:', encodedLineItemId);\n      const response = await editLineitem(encodedLineItemId, {\n        processIds: updatedLineItem.processIds,\n        vendorIds: updatedLineItem.vendorIds\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Updated Line Item:', response.data);\n\n      // Refresh the line items\n      fetchLineItemsForOrder();\n      setIsEditPopupOpen(false); // Close the popup\n    } catch (err) {\n      var _err$response3;\n      console.error('Error updating line item:', ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n    }\n  };\n  useEffect(() => {\n    console.log('Shape:', newLineItem.shape);\n    console.log('Grade:', newLineItem.grade);\n    console.log('Dimensions:', newLineItem.dimensions);\n    console.log('Density:', density);\n    if (newLineItem.shape || newLineItem.grade || Object.values(newLineItem.dimensions).some(val => val)) {\n      setNewLineItem(prev => ({\n        ...prev,\n        weight: calculateWeight()\n      }));\n    }\n  }, [newLineItem.shape, newLineItem.grade, newLineItem.dimensions]);\n  useEffect(() => {\n    const {\n      totalWeight,\n      weightPerUnit\n    } = calculateWeight();\n    setNewLineItem(prev => ({\n      ...prev,\n      weight: totalWeight,\n      // Update total weight in the state\n      weightPerUnit // Update weight per unit in the state\n    }));\n  }, [newLineItem.shape, newLineItem.dimensions, newLineItem.quantity, density, calculateWeight]);\n  useEffect(() => {\n    console.log('Updated fetchedLineItems:', fetchedLineItems.data);\n    console.log('Fetched Line Items:', fetchedLineItems);\n    console.log('Is Array:', Array.isArray(fetchedLineItems));\n    console.log('Length:', fetchedLineItems);\n  }, [fetchedLineItems]); // This will log whenever `fetchedLineItems` changes\n\n  const handleShapeChange = e => {\n    const selectedShape = e.target.value;\n    setNewLineItem(prev => ({\n      ...prev,\n      shape: selectedShape,\n      dimensions: {\n        length: '',\n        breadth: '',\n        thickness: '',\n        diameter: ''\n      },\n      // Reset dimensions\n      weight: '' // Clear weight\n    }));\n  };\n  const renderDimensionFields = () => {\n    const selectedShape = newLineItem.shape;\n    const dimensionsToRender = shapeDimensionMap[selectedShape] || [];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textbox-container\",\n      children: dimensionsToRender.map(dimension => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: dimension,\n        placeholder: dimension.charAt(0).toUpperCase() + dimension.slice(1),\n        value: newLineItem.dimensions[dimension] || '',\n        onChange: e => setNewLineItem(prev => ({\n          ...prev,\n          dimensions: {\n            ...prev.dimensions,\n            [dimension]: parseFloat(e.target.value) || null\n          }\n        })),\n        required: true\n      }, dimension, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Order Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), order && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Order ID: \", order.orderId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Creator: \", order.creator]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New Line Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lineItemId\",\n          children: \"Next Line Item ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"lineItemId\",\n          value: nextLineItemId,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"shape\",\n        value: newLineItem.shape,\n        onChange: handleShapeChange,\n        onClick: fetchShapesOnClick,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Shape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), Array.isArray(shapes) && shapes.length > 0 ? shapes.map(shape => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: shape.shapeId,\n          children: shape.shapeId\n        }, shape._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          children: \"No shapes available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"grade\",\n        value: newLineItem.grade,\n        onChange: handleDropdownChange,\n        onClick: fetchGradesOnClick,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Grade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), Array.isArray(grades) && grades.length > 0 ? grades.map(grade => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: grade.grade,\n          children: grade.grade\n        }, grade._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          children: \"No grades available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), renderDimensionFields(), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Quantity\",\n        value: newLineItem.quantity,\n        onChange: e => setNewLineItem(prev => ({\n          ...prev,\n          quantity: e.target.value\n        })),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        placeholder: \"Weight\",\n        value: newLineItem.weight // Dynamically updated weight\n        ,\n        readOnly: true,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Total Weight\",\n        value: newLineItem.weight || '' // Dynamically updated weight\n        ,\n        readOnly: true,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Weight Per Unit\",\n        value: newLineItem.weightPerUnit || '' // Dynamically updated weight per unit\n        ,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"processIds\",\n        value: newLineItem.processIds[0] || '',\n        onChange: e => setNewLineItem(prev => ({\n          ...prev,\n          processIds: [e.target.value] // Set the first selected process\n        })),\n        onClick: fetchProcessesOnClick,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 3\n        }, this), Array.isArray(processes) && processes.length > 0 ? processes.map(process => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: process.processId,\n          children: process.processId\n        }, process._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 7\n        }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          children: \"No processes available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"vendorIds\",\n        value: newLineItem.vendorIds[0] || '',\n        onChange: e => setNewLineItem(prev => ({\n          ...prev,\n          vendorIds: [e.target.value] // Set the first selected vendor\n        })),\n        onClick: fetchVendorsOnClick,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Vendor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 3\n        }, this), Array.isArray(vendors) && vendors.length > 0 ? vendors.map(vendor => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: vendor.vendorId,\n          children: vendor.vendorId\n        }, vendor._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 7\n        }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n          disabled: true,\n          children: \"No vendors available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Line Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Existing Line Items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this), fetchedLineItems.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Line Item ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Shape\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Grade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Dimensions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Weight\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Processes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Vendors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: fetchedLineItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.lineItemId || 'Unknown'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.shape || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.grade || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.dimensions ? Object.entries(item.dimensions).filter(([_, value]) => value && value !== 'N/A') // Filter out keys with N/A or empty values\n            .map(([key, value]) => `${key}: ${value}`).join(', ') : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.quantity || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.weight || 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: Array.isArray(item.processIds) ? item.processIds.join(', ') // Show all selected processIds\n            : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: Array.isArray(item.vendorIds) ? item.vendorIds.join(', ') // Show all selected vendorIds\n            : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditLineItem(item),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteLineItem(item.lineItemId),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 7\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No line items available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 9\n    }, this), isEditPopupOpen && editingLineItem && /*#__PURE__*/_jsxDEV(EditPopup, {\n      lineItem: editingLineItem,\n      onClose: () => setIsEditPopupOpen(false),\n      onSave: updatedLineItem => {\n        console.log('Save clicked with:', updatedLineItem);\n        handleUpdateLineItem(updatedLineItem); // Update the line item\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }, this);\n};\n_s(OrderDetails, \"tbGG+qCHXypotQSG4K0soIbr444=\", false, function () {\n  return [useParams];\n});\n_c = OrderDetails;\nexport default OrderDetails;\nvar _c;\n$RefreshReg$(_c, \"OrderDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","Select","axios","useCallback","fetchOrder","fetchLineItems","fetchProcesses","fetchVendors","fetchShapes","fetchGrades","createLineItem","editLineitem","deleteLineItem","EditPopup","jsxDEV","_jsxDEV","OrderDetails","_s","id","order","setOrder","lineItems","setLineItems","fetchedLineItems","setfetchedLineItems","nextLineItemId","setNextLineItemId","processes","setProcesses","vendors","setVendors","shapes","setShapes","grades","setGrades","allPossibleDimensions","shapeDimensionMap","newLineItem","setNewLineItem","shape","grade","dimensions","length","breadth","thickness","diameter","quantity","weight","processIds","vendorIds","density","setDensity","message","setMessage","loadOrderData","orderData","console","log","lineItemData","data","get","err","error","fetchShapesOnClick","shapeData","fetchGradesOnClick","gradeData","fetchVendorsOnClick","vendorData","fetchProcessesOnClick","processData","fetchLineItemsForOrder","orderId","handleSubmit","e","preventDefault","updatedDimensions","forEach","dimension","allValid","Object","values","every","value","lineItemId","response","prev","Array","isArray","_err$response","calculateWeight","totalWeight","weightPerUnit","volume","Math","PI","pow","area","sqrt","isNaN","toFixed","fetchDensity","selectedGrade","find","g","handleDropdownChange","name","target","fetchedDensity","editingLineItem","setEditingLineItem","isEditPopupOpen","setIsEditPopupOpen","handleEditLineItem","item","handleDeleteLineItem","window","confirm","encodeURIComponent","_err$response2","handleUpdateLineItem","updatedLineItem","Error","encodedLineItemId","headers","_err$response3","some","val","handleShapeChange","selectedShape","renderDimensionFields","dimensionsToRender","className","children","map","type","placeholder","charAt","toUpperCase","slice","onChange","parseFloat","required","fileName","_jsxFileName","lineNumber","columnNumber","creator","onSubmit","htmlFor","readOnly","onClick","shapeId","_id","disabled","process","processId","vendor","vendorId","index","entries","filter","_","key","join","lineItem","onClose","onSave","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/OrderDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Select from 'react-select';\nimport axios from 'axios';\nimport { useCallback } from 'react';\nimport {\n  fetchOrder,\n  fetchLineItems,\n  fetchProcesses,\n  fetchVendors,\n  fetchShapes,\n  fetchGrades,\n  createLineItem,\n  editLineitem,\n  deleteLineItem,\n} from '../services/api';\nimport EditPopup from './EditPopup';\n\n\n\nconst OrderDetails = () => {\n  const { id } = useParams();\n  const [order, setOrder] = useState(null);\n  const [lineItems, setLineItems] = useState([]);\n  const [fetchedLineItems, setfetchedLineItems] = useState([]);\n  const [nextLineItemId, setNextLineItemId] = useState(''); // Next available lineItemId\n  const [processes, setProcesses] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [shapes, setShapes] = useState([]);\n  const [grades, setGrades] = useState([]);\n  const allPossibleDimensions = ['length', 'breadth', 'thickness', 'diameter'];\n\n  const shapeDimensionMap = {\n    'Sheet': ['length', 'breadth', 'thickness'],\n    'round bar': ['diameter', 'length'],\n    'square bar': ['thickness', 'length'],\n    'hexagon bar': ['thickness', 'length'],\n    'flat bar': ['length', 'breadth', 'thickness'],\n  };\n  const [newLineItem, setNewLineItem] = useState({\n    shape: '',\n    grade: '',\n    dimensions: { length: '', breadth: '', thickness: '', diameter: '' },\n    quantity: '',\n    weight: '',\n    processIds: [],\n    vendorIds: [],\n  });\n  const [density, setDensity] = useState(0);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const loadOrderData = async () => {\n      try {\n        const orderData = await fetchOrder(id);\n        console.log('Fetched Order:', orderData);\n        setOrder(orderData);\n\n        const lineItemData = await fetchLineItems(id);\n        console.log('Fetched Line Items:', lineItemData);\n        setLineItems(lineItemData);\n        setfetchedLineItems(lineItemData.data);\n        const { data } = await axios.get(`https://munani.onrender.comapi/lineitems/nextLineItemId/${id}`);\n        setNextLineItemId(data.nextLineItemId);\n      } catch (err) {\n        console.error('Error fetching data:', err.message);\n        setMessage('Failed to load data.');\n      }\n    };\n    loadOrderData();\n  }, [id]);\n\n  const fetchShapesOnClick = async () => {\n    if (shapes.length > 0) return;\n    try {\n      const shapeData = await fetchShapes();\n      setShapes(shapeData);\n    } catch (err) {\n      console.error('Error fetching shapes:', err.message);\n    }\n  };\n\n  const fetchGradesOnClick = async () => {\n    if (grades.length > 0) return;\n    try {\n      const gradeData = await fetchGrades();\n      setGrades(gradeData);\n    } catch (err) {\n      console.error('Error fetching grades:', err.message);\n    }\n  };\n\n  const fetchVendorsOnClick = async () => {\n    if (vendors.length > 0) return;\n    try {\n      const vendorData = await fetchVendors();\n      setVendors(vendorData);\n    } catch (err) {\n      console.error('Error fetching vendors:', err.message);\n    }\n  };\n\n  const fetchProcessesOnClick = async () => {\n    if (processes.length > 0) return;\n    try {\n      const processData = await fetchProcesses();\n      setProcesses(processData);\n    } catch (err) {\n      console.error('Error fetching processes:', err.message);\n    }\n  };\n\n  const fetchLineItemsForOrder = async () => {\n    try {\n      \n      const lineItemData = await fetchLineItems(order.orderId);\n      setfetchedLineItems(lineItemData.data);\n      console.log(\"fetched Lineitems Again: \",fetchedLineItems);\n    } catch (err) {\n      console.error('Error fetching updated line items:', err.message);\n    }\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // Validate and log the dimensions\n    const { dimensions } = newLineItem;\n    console.log('Submitting Dimensions:', dimensions);\n    const updatedDimensions = {};\n    allPossibleDimensions.forEach((dimension) => {\n      updatedDimensions[dimension] = dimensions[dimension] || null;\n    });\n    // Check if all dimensions are numbers or null\n    const allValid = Object.values(updatedDimensions).every(\n      (value) => value === null || typeof value === 'number'\n    );\n  \n    if (!allValid) {\n      console.error('Invalid dimensions:', updatedDimensions);\n      setMessage('Please provide valid numeric dimensions.');\n      return;\n    }\n  \n    console.log('Submitting Line Item:', { ...newLineItem, orderId: id, lineItemId: nextLineItemId,dimensions:updatedDimensions });\n  \n    try {\n      const response = await createLineItem({ ...newLineItem, orderId: id, lineItemId: nextLineItemId ,dimensions:updatedDimensions });\n      console.log('Line Item Created:', response);\n  \n      setMessage('Line item added successfully!');\n      fetchLineItemsForOrder();\n      \n      setLineItems((prev) => (Array.isArray(prev) ? [...prev, response] : [response]));\n      setNewLineItem({\n        shape: '',\n        grade: '',\n        dimensions: { length: updatedDimensions.length, breadth: updatedDimensions.breadth, thickness: updatedDimensions.thickness, diameter: updatedDimensions.diameter },\n        quantity: '',\n        weight: '',\n        processIds: [],\n        vendorIds: [],\n      });\n      const lineItemData = await fetchLineItems(id);\n      setLineItems(lineItemData);\n      // Fetch next lineItemId for subsequent additions\n      const { data } = await axios.get(`https://munani.onrender.com/api/lineitems/nextLineItemId/${id}`);\n      setNextLineItemId(data.nextLineItemId);\n    } catch (err) {\n      console.error('Failed to add line item:', err.response?.data || err.message);\n      setMessage('Failed to add line item.');\n    }\n  };\n\n\n  const calculateWeight = useCallback(() => {\n    const { shape, dimensions, quantity } = newLineItem;\n    const { length, breadth, thickness, diameter } = dimensions;\n  \n    if (!shape || !density || !quantity || quantity <= 0) {\n      return { totalWeight: '', weightPerUnit: '' }; // Return empty if missing key data\n    }\n  \n    let volume = 0;\n  \n    if (shape === 'round bar') {\n      if (diameter && length) {\n        volume = Math.PI * Math.pow(diameter / 2, 2) * length; // Volume of a cylinder\n      }\n    } else if (shape === 'Sheet' || shape === 'flat bar') {\n      if (length && breadth && thickness) {\n        volume = length * breadth * thickness; // Volume of a rectangular block\n      }\n    } else if (shape === 'square bar') {\n      if (thickness && length) {\n        volume = Math.pow(thickness, 2) * length; // Volume of a square cross-section bar\n      }\n    } else if (shape === 'hexagon bar') {\n      if (thickness && length) {\n        const area = (3 * Math.sqrt(3) * Math.pow(thickness / 2, 2)) / 2; // Area of hexagon\n        volume = area * length; // Volume of hexagonal prism\n      }\n    }\n  \n    const totalWeight = volume * density * quantity*0.000001; // Multiply by quantity\n    const weightPerUnit = totalWeight / quantity; // Divide totalWeight by quantity\n  \n    return {\n      totalWeight: isNaN(totalWeight) ? '' : totalWeight.toFixed(2),\n      weightPerUnit: isNaN(weightPerUnit) ? '' : weightPerUnit.toFixed(2),\n    };\n  }, [newLineItem, density]); // Dependencies for useCallback\n  \n  \n  \n  const fetchDensity = async (selectedGrade) => {\n    const grade = grades.find((g) => g.grade === selectedGrade);\n    return grade ? grade.density : 0; // Return 0 if no matching grade\n  };\n  \n  const handleDropdownChange = async (e) => {\n    const { name, value } = e.target;\n  \n    if (name === 'grade') {\n      const fetchedDensity = await fetchDensity(value);\n      setDensity(fetchedDensity);\n      setNewLineItem((prev) => ({ ...prev, [name]: value }));\n    } else {\n      setNewLineItem((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  \n\nconst [editingLineItem, setEditingLineItem] = useState(null); // Line item to edit\nconst [isEditPopupOpen, setIsEditPopupOpen] = useState(false); // Whether popup is open\n\nconst handleEditLineItem = (item) => {\n  setEditingLineItem(item); // Set the line item being edited\n  setIsEditPopupOpen(true); // Open the popup\n};\nconst handleDeleteLineItem = async (lineItemId) => {\n  try {\n    // Confirm deletion\n    if (!window.confirm('Are you sure you want to delete this line item?')) {\n      return; // Exit if user cancels\n    }\n\n    // Call the delete API\n    const response = await deleteLineItem(encodeURIComponent(lineItemId));\n    console.log('Line Item Deleted:', response.data);\n\n    // Refresh the list of line items after deletion\n    await fetchLineItemsForOrder();\n    \n    // Show success message\n    setMessage(`✅ Line item ${lineItemId} deleted successfully!`);\n  } catch (err) {\n    console.error('❌ Error deleting line item:', err.response?.data || err.message);\n    setMessage('❌ Failed to delete line item.');\n  }\n};\n\n\n\nconst handleUpdateLineItem = async (updatedLineItem) => {\n  try {\n    console.log('Update button clicked:', updatedLineItem);\n\n    // Validate data\n    if (\n      !Array.isArray(updatedLineItem.processIds) ||\n      !Array.isArray(updatedLineItem.vendorIds)\n    ) {\n      throw new Error('processIds and vendorIds must be arrays.');\n    }\n\n    console.log('processIds:', updatedLineItem.processIds);\n    console.log('vendorIds:', updatedLineItem.vendorIds);\n\n    // Encode the lineItemId once\n    const encodedLineItemId = encodeURIComponent(updatedLineItem.lineItemId);\n    console.log('Encoded Line Item ID:', encodedLineItemId);\n\n    const response = await editLineitem(encodedLineItemId, {\n      processIds: updatedLineItem.processIds,\n      vendorIds: updatedLineItem.vendorIds,\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    console.log('Updated Line Item:', response.data);\n\n    // Refresh the line items\n    fetchLineItemsForOrder();\n    setIsEditPopupOpen(false); // Close the popup\n  } catch (err) {\n    console.error('Error updating line item:', err.response?.data || err.message);\n  }\n};\n\n\n\nuseEffect(() => {\n  console.log('Shape:', newLineItem.shape);\n  console.log('Grade:', newLineItem.grade);\n  console.log('Dimensions:', newLineItem.dimensions);\n  console.log('Density:', density);\n  if (newLineItem.shape || newLineItem.grade || Object.values(newLineItem.dimensions).some((val) => val)) {\n    setNewLineItem((prev) => ({ ...prev, weight: calculateWeight() }));\n  }\n}, [newLineItem.shape, newLineItem.grade, newLineItem.dimensions]);\nuseEffect(() => {\n  const { totalWeight, weightPerUnit } = calculateWeight();\n  setNewLineItem((prev) => ({\n    ...prev,\n    weight: totalWeight, // Update total weight in the state\n    weightPerUnit, // Update weight per unit in the state\n  }));\n}, [newLineItem.shape, newLineItem.dimensions, newLineItem.quantity, density, calculateWeight]);\n\n\n\nuseEffect(() => {\n\n  console.log('Updated fetchedLineItems:', fetchedLineItems.data);\n  console.log('Fetched Line Items:', fetchedLineItems);\nconsole.log('Is Array:', Array.isArray(fetchedLineItems));\nconsole.log('Length:', fetchedLineItems);\n\n}, [fetchedLineItems]); // This will log whenever `fetchedLineItems` changes\n\nconst handleShapeChange = (e) => {\n  const selectedShape = e.target.value;\n  setNewLineItem((prev) => ({\n    ...prev,\n    shape: selectedShape,\n    dimensions: { length: '', breadth: '', thickness: '', diameter: '' }, // Reset dimensions\n    weight: '', // Clear weight\n  }));\n};\n\n\n  const renderDimensionFields = () => {\n    const selectedShape = newLineItem.shape;\n    const dimensionsToRender = shapeDimensionMap[selectedShape] || [];\n\n    return (\n      <div className='textbox-container'>\n        {dimensionsToRender.map((dimension) => (\n          <input\n            key={dimension}\n            type=\"number\"\n            name={dimension}\n            placeholder={dimension.charAt(0).toUpperCase() + dimension.slice(1)}\n            value={newLineItem.dimensions[dimension] || ''}\n            onChange={(e) =>\n              setNewLineItem((prev) => ({\n                ...prev,\n                dimensions: {\n                  ...prev.dimensions,\n                  [dimension]: parseFloat(e.target.value) || null,\n                },\n              }))\n            }\n            required\n          />\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Order Details</h1>\n      {order && (\n        <div>\n          <p>Order ID: {order.orderId}</p>\n          <p>Creator: {order.creator}</p>\n        </div>\n      )}\n\n      <h2>Add New Line Item</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"lineItemId\">Next Line Item ID:</label>\n          <input type=\"text\" id=\"lineItemId\" value={nextLineItemId} readOnly />\n        </div>\n\n        {/* Shape Selection */}\n        <select\n          name=\"shape\"\n          value={newLineItem.shape}\n          onChange={handleShapeChange}\n          onClick={fetchShapesOnClick}\n        >\n          <option value=\"\">Select Shape</option>\n          {Array.isArray(shapes) && shapes.length > 0 ? (\n            shapes.map((shape) => (\n              <option key={shape._id} value={shape.shapeId}>\n                {shape.shapeId}\n              </option>\n            ))\n          ) : (\n            <option disabled>No shapes available</option>\n          )}\n        </select>\n\n        <select\n          name=\"grade\"\n          value={newLineItem.grade}\n          onChange={handleDropdownChange}\n          onClick={fetchGradesOnClick}\n        >\n          <option value=\"\">Select Grade</option>\n          {Array.isArray(grades) && grades.length > 0 ? (\n            grades.map((grade) => (\n              <option key={grade._id} value={grade.grade}>\n                {grade.grade}\n              </option>\n            ))\n          ) : (\n            <option disabled>No grades available</option>\n          )}\n        </select>\n\n        {/* Dynamic Dimension Fields */}\n        {renderDimensionFields()}\n\n        <input\n          type=\"number\"\n          placeholder=\"Quantity\"\n          value={newLineItem.quantity}\n          onChange={(e) =>\n            setNewLineItem((prev) => ({ ...prev, quantity: e.target.value }))\n          }\n          required\n        />\n\n<input\n          type=\"hidden\"\n          placeholder=\"Weight\"\n          value={newLineItem.weight} // Dynamically updated weight\n          readOnly\n          \n          required\n        /> \n  <input\n    type=\"number\"\n    placeholder=\"Total Weight\"\n    value={newLineItem.weight || ''} // Dynamically updated weight\n    readOnly\n    required\n  />\n\n  {/* Weight Per Unit (Read-Only) */}\n  <input\n    type=\"number\"\n    placeholder=\"Weight Per Unit\"\n    value={newLineItem.weightPerUnit || ''} // Dynamically updated weight per unit\n    readOnly\n  />\n\n<select\n  name=\"processIds\"\n  value={newLineItem.processIds[0] || ''}\n  onChange={(e) =>\n    setNewLineItem((prev) => ({\n      ...prev,\n      processIds: [e.target.value], // Set the first selected process\n    }))\n  }\n  onClick={fetchProcessesOnClick}\n>\n  <option value=\"\">Select Process</option>\n  {Array.isArray(processes) && processes.length > 0 ? (\n    processes.map((process) => (\n      <option key={process._id} value={process.processId}>\n        {process.processId}\n      </option>\n    ))\n  ) : (\n    <option disabled>No processes available</option>\n  )}\n</select>\n\n<select\n  name=\"vendorIds\"\n  value={newLineItem.vendorIds[0] || ''}\n  onChange={(e) =>\n    setNewLineItem((prev) => ({\n      ...prev,\n      vendorIds: [e.target.value], // Set the first selected vendor\n    }))\n  }\n  onClick={fetchVendorsOnClick}\n>\n  <option value=\"\">Select Vendor</option>\n  {Array.isArray(vendors) && vendors.length > 0 ? (\n    vendors.map((vendor) => (\n      <option key={vendor._id} value={vendor.vendorId}>\n        {vendor.vendorId}\n      </option>\n    ))\n  ) : (\n    <option disabled>No vendors available</option>\n  )}\n</select>\n\n\n        <button type=\"submit\">Add Line Item</button>\n      </form>\n      {message && <p>{message}</p>}\n\n      <h2>Existing Line Items</h2>\n      \n      {fetchedLineItems.length > 0 ? (\n        <table>\n          \n          <thead>\n            <tr>\n              <th>Line Item ID</th>\n              <th>Shape</th>\n              <th>Grade</th>\n              <th>Dimensions</th>\n              <th>Quantity</th>\n              <th>Weight</th>\n              <th>Processes</th>\n              <th>Vendors</th>\n            </tr>\n          </thead>\n          <tbody>\n            {fetchedLineItems.map((item, index) => (\n              <tr key={index}>\n                <td>{item.lineItemId || 'Unknown'}</td>\n                <td>{item.shape || 'N/A'}</td>\n                <td>{item.grade || 'N/A'}</td>\n                <td>\n  {item.dimensions\n    ? Object.entries(item.dimensions)\n        .filter(([_, value]) => value && value !== 'N/A') // Filter out keys with N/A or empty values\n        .map(([key, value]) => `${key}: ${value}`)\n        .join(', ')\n    : 'N/A'}\n</td>\n\n                <td>{item.quantity || 'N/A'}</td>\n                <td>{item.weight || 'N/A'}</td>\n                <td>\n                  {Array.isArray(item.processIds)\n                    ? item.processIds.join(', ') // Show all selected processIds\n                    : 'N/A'}\n                </td>\n                <td>\n                  {Array.isArray(item.vendorIds)\n                    ? item.vendorIds.join(', ') // Show all selected vendorIds\n                    : 'N/A'}\n                </td>\n                <td>\n        <button onClick={() => handleEditLineItem(item)}>Edit</button>\n      </td> \n      <td>\n        <button onClick={() => handleDeleteLineItem(item.lineItemId)}>Delete</button>\n      </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>No line items available</p>\n      )}\n      {isEditPopupOpen && editingLineItem && (\n  <EditPopup\n    lineItem={editingLineItem}\n    onClose={() => setIsEditPopupOpen(false)}\n    onSave={(updatedLineItem) => {\n      console.log('Save clicked with:', updatedLineItem);\n      handleUpdateLineItem(updatedLineItem); // Update the line item\n    }}\n  />\n)}\n    </div>\n  );\n};\n\n\nexport default OrderDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}