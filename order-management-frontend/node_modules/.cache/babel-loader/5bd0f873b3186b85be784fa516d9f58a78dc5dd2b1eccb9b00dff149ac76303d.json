{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/ExecutionDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useTable, useSortBy, useFilters } from '@tanstack/react-table';\nimport { fetchExecutionDetailsGrouped } from '../services/api';\nimport ExecutionEditPopup from './ExecutionEditPopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExecutionDetailsPage = () => {\n  _s();\n  const [executions, setExecutions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedExecution, setSelectedExecution] = useState(null);\n  useEffect(() => {\n    const loadExecutions = async () => {\n      try {\n        const data = await fetchExecutionDetailsGrouped();\n        setExecutions(data);\n      } catch (err) {\n        console.error('❌ Error fetching execution details:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadExecutions();\n  }, []);\n  const handleOpenPopup = execution => {\n    setSelectedExecution(execution);\n  };\n  const handleClosePopup = () => {\n    setSelectedExecution(null);\n  };\n  const handleSaveChanges = updatedData => {\n    setExecutions(prev => prev.map(exec => exec._id === selectedExecution._id ? {\n      ...exec,\n      ...updatedData\n    } : exec));\n  };\n  const columns = useMemo(() => [{\n    Header: 'Process',\n    accessor: 'processInfo.name'\n  }, {\n    Header: 'Vendor',\n    accessor: 'vendorInfo.name'\n  }, {\n    Header: 'Line Item',\n    accessor: 'lineItemId'\n  }, {\n    Header: 'Order',\n    accessor: 'orderId'\n  }, {\n    Header: 'Weight Sent',\n    accessor: 'outWeight'\n  }, {\n    Header: 'Actual Weight Sent',\n    accessor: 'actualWeightSent'\n  }, {\n    Header: 'Weight Received',\n    accessor: 'inWeight'\n  }, {\n    Header: 'Actual Weight Received',\n    accessor: 'actualWeightReceived'\n  }, {\n    Header: 'Status',\n    accessor: 'status'\n  }, {\n    Header: 'Actions',\n    id: 'actions',\n    Cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleOpenPopup(row.original),\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }, this)\n  }], []);\n  const tableInstance = useTable({\n    columns,\n    data: executions\n  }, useFilters, useSortBy);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Execution Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading execution details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render('Header'), column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), selectedExecution && /*#__PURE__*/_jsxDEV(ExecutionEditPopup, {\n      execution: selectedExecution,\n      onClose: handleClosePopup,\n      onSave: handleSaveChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(ExecutionDetailsPage, \"jgUh0CoU0b8OOZQzER78RrvaSi4=\", false, function () {\n  return [useTable];\n});\n_c = ExecutionDetailsPage;\nexport default ExecutionDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"ExecutionDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useTable","useSortBy","useFilters","fetchExecutionDetailsGrouped","ExecutionEditPopup","jsxDEV","_jsxDEV","ExecutionDetailsPage","_s","executions","setExecutions","loading","setLoading","selectedExecution","setSelectedExecution","loadExecutions","data","err","console","error","handleOpenPopup","execution","handleClosePopup","handleSaveChanges","updatedData","prev","map","exec","_id","columns","Header","accessor","id","Cell","row","onClick","original","children","fileName","_jsxFileName","lineNumber","columnNumber","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","border","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps","onClose","onSave","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/ExecutionDetails.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useTable, useSortBy, useFilters } from '@tanstack/react-table';\nimport { fetchExecutionDetailsGrouped } from '../services/api';\nimport ExecutionEditPopup from './ExecutionEditPopup';\n\nconst ExecutionDetailsPage = () => {\n  const [executions, setExecutions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedExecution, setSelectedExecution] = useState(null);\n\n  useEffect(() => {\n    const loadExecutions = async () => {\n      try {\n        const data = await fetchExecutionDetailsGrouped();\n        setExecutions(data);\n      } catch (err) {\n        console.error('❌ Error fetching execution details:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadExecutions();\n  }, []);\n\n  const handleOpenPopup = (execution) => {\n    setSelectedExecution(execution);\n  };\n\n  const handleClosePopup = () => {\n    setSelectedExecution(null);\n  };\n\n  const handleSaveChanges = (updatedData) => {\n    setExecutions((prev) =>\n      prev.map((exec) => (exec._id === selectedExecution._id ? { ...exec, ...updatedData } : exec))\n    );\n  };\n\n  const columns = useMemo(\n    () => [\n      { Header: 'Process', accessor: 'processInfo.name' },\n      { Header: 'Vendor', accessor: 'vendorInfo.name' },\n      { Header: 'Line Item', accessor: 'lineItemId' },\n      { Header: 'Order', accessor: 'orderId' },\n      { Header: 'Weight Sent', accessor: 'outWeight' },\n      { Header: 'Actual Weight Sent', accessor: 'actualWeightSent' },\n      { Header: 'Weight Received', accessor: 'inWeight' },\n      { Header: 'Actual Weight Received', accessor: 'actualWeightReceived' },\n      { Header: 'Status', accessor: 'status' },\n      {\n        Header: 'Actions',\n        id: 'actions',\n        Cell: ({ row }) => (\n          <button onClick={() => handleOpenPopup(row.original)}>Edit</button>\n        ),\n      },\n    ],\n    []\n  );\n\n  const tableInstance = useTable(\n    { columns, data: executions },\n    useFilters,\n    useSortBy\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\n\n  return (\n    <div className=\"container\">\n      <h2>Execution Management</h2>\n      {loading ? (\n        <p>Loading execution details...</p>\n      ) : (\n        <table {...getTableProps()} border=\"1\">\n          <thead>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render('Header')}\n                    {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody {...getTableBodyProps()}>\n            {rows.map((row) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()}>\n                  {row.cells.map((cell) => (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  ))}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n\n      {selectedExecution && (\n        <ExecutionEditPopup\n          execution={selectedExecution}\n          onClose={handleClosePopup}\n          onSave={handleSaveChanges}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ExecutionDetailsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}