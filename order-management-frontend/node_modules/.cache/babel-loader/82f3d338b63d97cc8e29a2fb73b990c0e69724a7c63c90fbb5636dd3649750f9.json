{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/ExecutionDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useReactTable, getCoreRowModel, getSortedRowModel, flexRender } from '@tanstack/react-table';\nimport { fetchExecutionDetailsGrouped } from '../services/api';\nimport ExecutionEditPopup from './ExecutionEditPopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExecutionDetailsPage = () => {\n  _s();\n  const [executions, setExecutions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedExecution, setSelectedExecution] = useState(null);\n  const [sorting, setSorting] = useState([]); // Sorting state\n\n  useEffect(() => {\n    const loadExecutions = async () => {\n      try {\n        const data = await fetchExecutionDetailsGrouped();\n        console.log('✅ API Response:', JSON.stringify(data, null, 2)); // Print full response\n        setExecutions(data);\n      } catch (err) {\n        console.error('❌ Error fetching execution details:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadExecutions();\n  }, []);\n  const handleOpenPopup = execution => {\n    setSelectedExecution(execution);\n  };\n  const handleClosePopup = () => {\n    setSelectedExecution(null);\n  };\n  const handleSaveChanges = updatedData => {\n    setExecutions(prev => prev.map(exec => exec._id === selectedExecution._id ? {\n      ...exec,\n      ...updatedData\n    } : exec));\n  };\n\n  // Define table columns\n  const columns = useMemo(() => [{\n    accessorKey: 'processInfo.name',\n    header: 'Process'\n  }, {\n    accessorKey: 'vendorInfo.name',\n    header: 'Vendor'\n  }, {\n    accessorKey: 'lineItemId',\n    header: 'Line Item'\n  }, {\n    accessorKey: 'orderId',\n    header: 'Order'\n  }, {\n    accessorKey: 'outWeight',\n    header: 'Weight Sent'\n  }, {\n    accessorKey: 'actualWeightSent',\n    header: 'Actual Weight Sent'\n  }, {\n    accessorKey: 'inWeight',\n    header: 'Weight Received'\n  }, {\n    accessorKey: 'actualWeightReceived',\n    header: 'Actual Weight Received'\n  }, {\n    accessorKey: 'status',\n    header: 'Status'\n  }, {\n    accessorKey: 'actions',\n    header: 'Actions',\n    cell: ({\n      row\n    }) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleOpenPopup(row.original),\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }], []);\n\n  // Initialize TanStack Table\n  const table = useReactTable({\n    data: executions,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting\n    },\n    onSortingChange: setSorting\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Execution Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading execution details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: table.getHeaderGroups().map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headerGroup.headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: header.column.getToggleSortingHandler(),\n            style: {\n              cursor: 'pointer'\n            },\n            children: [flexRender(header.column.columnDef.header, header.getContext()), header.column.getIsSorted() === 'asc' ? ' 🔼' : header.column.getIsSorted() === 'desc' ? ' 🔽' : '']\n          }, header.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 19\n          }, this))\n        }, headerGroup.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: table.getRowModel().rows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.getVisibleCells().map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: flexRender(cell.column.columnDef.cell, cell.getContext())\n          }, cell.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this))\n        }, row.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), selectedExecution && /*#__PURE__*/_jsxDEV(ExecutionEditPopup, {\n      execution: selectedExecution,\n      onClose: handleClosePopup,\n      onSave: handleSaveChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(ExecutionDetailsPage, \"i3r9Y1LevmLsazjsqKikv475lnk=\", false, function () {\n  return [useReactTable];\n});\n_c = ExecutionDetailsPage;\nexport default ExecutionDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"ExecutionDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useReactTable","getCoreRowModel","getSortedRowModel","flexRender","fetchExecutionDetailsGrouped","ExecutionEditPopup","jsxDEV","_jsxDEV","ExecutionDetailsPage","_s","executions","setExecutions","loading","setLoading","selectedExecution","setSelectedExecution","sorting","setSorting","loadExecutions","data","console","log","JSON","stringify","err","error","handleOpenPopup","execution","handleClosePopup","handleSaveChanges","updatedData","prev","map","exec","_id","columns","accessorKey","header","cell","row","onClick","original","children","fileName","_jsxFileName","lineNumber","columnNumber","table","state","onSortingChange","className","border","getHeaderGroups","headerGroup","headers","column","getToggleSortingHandler","style","cursor","columnDef","getContext","getIsSorted","id","getRowModel","rows","getVisibleCells","onClose","onSave","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/ExecutionDetails.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { useReactTable, getCoreRowModel, getSortedRowModel, flexRender } from '@tanstack/react-table';\nimport { fetchExecutionDetailsGrouped } from '../services/api';\nimport ExecutionEditPopup from './ExecutionEditPopup';\n\nconst ExecutionDetailsPage = () => {\n  const [executions, setExecutions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedExecution, setSelectedExecution] = useState(null);\n  const [sorting, setSorting] = useState([]); // Sorting state\n\n  useEffect(() => {\n    const loadExecutions = async () => {\n      try {\n        const data = await fetchExecutionDetailsGrouped();\n        console.log('✅ API Response:', JSON.stringify(data, null, 2)); // Print full response\n        setExecutions(data);\n      } catch (err) {\n        console.error('❌ Error fetching execution details:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    loadExecutions();\n  }, []);\n  \n\n  const handleOpenPopup = (execution) => {\n    setSelectedExecution(execution);\n  };\n\n  const handleClosePopup = () => {\n    setSelectedExecution(null);\n  };\n\n  const handleSaveChanges = (updatedData) => {\n    setExecutions((prev) =>\n      prev.map((exec) => (exec._id === selectedExecution._id ? { ...exec, ...updatedData } : exec))\n    );\n  };\n\n  // Define table columns\n  const columns = useMemo(() => [\n    { accessorKey: 'processInfo.name', header: 'Process' },\n    { accessorKey: 'vendorInfo.name', header: 'Vendor' },\n    { accessorKey: 'lineItemId', header: 'Line Item' },\n    { accessorKey: 'orderId', header: 'Order' },\n    { accessorKey: 'outWeight', header: 'Weight Sent' },\n    { accessorKey: 'actualWeightSent', header: 'Actual Weight Sent' },\n    { accessorKey: 'inWeight', header: 'Weight Received' },\n    { accessorKey: 'actualWeightReceived', header: 'Actual Weight Received' },\n    { accessorKey: 'status', header: 'Status' },\n    {\n      accessorKey: 'actions',\n      header: 'Actions',\n      cell: ({ row }) => (\n        <button onClick={() => handleOpenPopup(row.original)}>Edit</button>\n      ),\n    },\n  ], []);\n\n  // Initialize TanStack Table\n  const table = useReactTable({\n    data: executions,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n    },\n    onSortingChange: setSorting,\n  });\n\n  return (\n    <div className=\"container\">\n      <h2>Execution Management</h2>\n      {loading ? (\n        <p>Loading execution details...</p>\n      ) : (\n        <table border=\"1\">\n          <thead>\n            {table.getHeaderGroups().map(headerGroup => (\n              <tr key={headerGroup.id}>\n                {headerGroup.headers.map(header => (\n                  <th key={header.id} onClick={header.column.getToggleSortingHandler()} style={{ cursor: 'pointer' }}>\n                    {flexRender(header.column.columnDef.header, header.getContext())}\n                    {header.column.getIsSorted() === 'asc' ? ' 🔼' : header.column.getIsSorted() === 'desc' ? ' 🔽' : ''}\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody>\n            {table.getRowModel().rows.map(row => (\n              <tr key={row.id}>\n                {row.getVisibleCells().map(cell => (\n                  <td key={cell.id}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n\n      {selectedExecution && (\n        <ExecutionEditPopup\n          execution={selectedExecution}\n          onClose={handleClosePopup}\n          onSave={handleSaveChanges}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ExecutionDetailsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}