{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchVendors, fetchProcesses, fetchLineItemProcesses, reorderLineItemProcesses, createLineItemProcess, deleteLineItemProcess } from '../services/api';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport { arrayMove, SortableContext, useSortable, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPopup = ({\n  lineItem,\n  onClose,\n  onSave\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [lineItemProcesses, setLineItemProcesses] = useState([]); // Existing LineItemProcesses\n  const [newProcess, setNewProcess] = useState({\n    processId: '',\n    vendorId: ''\n  });\n  const [draggedProcess, setDraggedProcess] = useState(null);\n  useEffect(() => {\n    // Fetch initial data for vendors, processes, and line item processes\n    const loadInitialData = async () => {\n      try {\n        const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n        console.log('editpopup: Encoded lineItemId:', encodedLineItemId);\n\n        // Fetch vendors\n        const vendorData = await fetchVendors();\n        console.log('editpopup: Fetched vendors:', vendorData);\n        setVendors(vendorData);\n\n        // Fetch processes\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n\n        // Fetch line item processes\n        const lineItemProcessData = await fetchLineItemProcesses(encodedLineItemId);\n        console.log('editpopup: Fetched line item processes:', lineItemProcessData);\n\n        // Log each item in lineItemProcessData\n        lineItemProcessData.forEach((item, index) => {\n          console.log(`editpopup: Line item process ${index}:`, item);\n          console.log(`editpopup: Line item process ${index} _id:`, item._id);\n        });\n        setLineItemProcesses(lineItemProcessData.map((process, index) => {\n          var _process$_id;\n          return {\n            ...process,\n            _id: ((_process$_id = process._id) === null || _process$_id === void 0 ? void 0 : _process$_id.$oid) || `process-${index}`,\n            // Extract the $oid property if it exists\n            customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${process.sequence}`\n          };\n        }));\n      } catch (err) {\n        console.error('editpopup: Error loading initial data:', err.message);\n      }\n    };\n    if (lineItem.lineItemId) {\n      loadInitialData(); // Fetch data if lineItemId is available\n    }\n  }, [lineItem.lineItemId]);\n\n  // Sensors for drag-and-drop\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n\n  // Sortable item component\n  const SortableItem = ({\n    id,\n    process\n  }) => {\n    _s();\n    console.log('SortableItem props:', {\n      id,\n      process\n    });\n    const {\n      attributes,\n      listeners,\n      setNodeRef,\n      transform,\n      transition\n    } = useSortable({\n      id: id\n    });\n    if (!id || !process) {\n      console.error('SortableItem received undefined id or process:', {\n        id,\n        process\n      });\n      return null;\n    }\n    const handleRemove = async e => {\n      e.stopPropagation(); // Prevent drag event from triggering\n      try {\n        // Make sure we have both IDs\n        if (!lineItem.lineItemId || !process._id) {\n          console.error('Missing required IDs for deletion');\n          return;\n        }\n        console.log('Removing process:', {\n          lineItemId: lineItem.lineItemId,\n          processId: process._id\n        });\n\n        // Call delete API with the correct IDs\n        await deleteLineItemProcess(lineItem.lineItemId, process._id);\n\n        // Update state after successful deletion\n        setLineItemProcesses(prev => prev.filter(item => item._id !== process._id));\n      } catch (err) {\n        console.error('Error removing process:', err);\n      }\n    };\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n      padding: '10px',\n      margin: '5px 0',\n      background: '#f8f8f8',\n      border: '1px solid #ddd',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: setNodeRef,\n      style: style,\n      ...attributes,\n      ...listeners,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Sequence: \", process.sequence, \", Process: \", process.processId, \", Vendor: \", process.vendorId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRemove,\n        style: {\n          marginLeft: '10px',\n          color: 'red',\n          border: 'none',\n          background: 'none',\n          cursor: 'pointer'\n        },\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  };\n  _s(SortableItem, \"FTUh0JV0KNM2MI3tYtLrQh0rr1U=\", false, function () {\n    return [useSortable];\n  });\n  const handleDragEnd = event => {\n    if (!event || !event.active || !event.over) {\n      console.warn('handleDragEnd: Missing active or over:', event);\n      return;\n    }\n    const {\n      active,\n      over\n    } = event;\n    if (!active.id || !over.id) {\n      console.warn('handleDragEnd: Missing ID in active or over:', {\n        active,\n        over\n      });\n      return;\n    }\n    console.log(`handleDragEnd: Moving ${active.id} over ${over.id}`);\n    setLineItemProcesses(items => {\n      const oldIndex = items.findIndex(item => item.customId === active.id);\n      const newIndex = items.findIndex(item => item.customId === over.id);\n      if (oldIndex === -1 || newIndex === -1) {\n        console.warn('handleDragEnd: Invalid indices:', {\n          oldIndex,\n          newIndex\n        });\n        return items;\n      }\n      const updatedItems = arrayMove(items, oldIndex, newIndex);\n      return updatedItems.map((item, index) => ({\n        ...item,\n        sequence: index + 1,\n        customId: `${item.lineItemId}/${item.vendorId}/${item.processId}/${index + 1}`\n      }));\n    });\n  };\n  const handleAddProcess = async () => {\n    if (!newProcess.processId || !newProcess.vendorId) {\n      console.warn('editpopup: Please select both a process and a vendor before adding.');\n      return;\n    }\n    try {\n      // Generate sequence number based on current processes count\n      const newSequence = lineItemProcesses.length + 1;\n\n      // Create a unique custom ID\n      const newCustomId = `${lineItem.lineItemId}/${newProcess.vendorId}/${newProcess.processId}/${newSequence}`;\n\n      // Check if the same process already exists\n      const isDuplicate = lineItemProcesses.some(item => item.customId === newCustomId);\n      if (isDuplicate) {\n        console.warn(`editpopup: Process with ID ${newCustomId} already exists.`);\n        return;\n      }\n      const newEntry = {\n        lineItemId: lineItem.lineItemId,\n        processId: newProcess.processId,\n        vendorId: newProcess.vendorId,\n        sequence: newSequence,\n        customId: newCustomId\n      };\n      console.log('editpopup: Sending new process to backend:', newEntry);\n\n      // Save to backend and capture response\n      const response = await createLineItemProcess(newEntry);\n      if (!response || response.error) {\n        console.error('editpopup: Backend error:', (response === null || response === void 0 ? void 0 : response.error) || 'Unknown error');\n        return;\n      }\n      console.log('editpopup: Process successfully added:', response);\n\n      // Fetch latest processes instead of appending manually (prevents stale data issues)\n      const updatedProcesses = await fetchLineItemProcesses(encodeURIComponent(lineItem.lineItemId));\n\n      // Update state with the newly fetched list\n      setLineItemProcesses(updatedProcesses.map((process, index) => ({\n        ...process,\n        sequence: index + 1,\n        // Ensure correct sequence\n        customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${index + 1}`\n      })));\n      console.log('editpopup: Updated lineItemProcesses after addition:', updatedProcesses);\n\n      // Reset form input\n      setNewProcess({\n        processId: '',\n        vendorId: ''\n      });\n    } catch (err) {\n      console.error('editpopup: Error adding new process:', err);\n    }\n  };\n  const handleSave = async () => {\n    try {\n      const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n      console.log(`editpopup: Encoded lineItemId for save: ${encodedLineItemId}`);\n\n      // Save reordered processes to backend\n      const reorderedProcessesPayload = lineItemProcesses.map(process => ({\n        lineItemProcessId: process._id,\n        // Ensure this matches the backend field\n        sequence: process.sequence\n      }));\n      await reorderLineItemProcesses(encodedLineItemId, reorderedProcessesPayload);\n      console.log('editpopup: Saved reordered processes:', lineItemProcesses);\n\n      // Refetch updated processes to ensure the latest data is shown\n      const updatedProcesses = await fetchLineItemProcesses(encodedLineItemId);\n      setLineItemProcesses(updatedProcesses.map((process, index) => {\n        var _process$_id2;\n        return {\n          ...process,\n          _id: ((_process$_id2 = process._id) === null || _process$_id2 === void 0 ? void 0 : _process$_id2.$oid) || `process-${index}` // Extract the $oid property if it exists\n        };\n      }));\n      const processIds = updatedProcesses.map(item => item.processId);\n      const vendorIds = updatedProcesses.map(item => item.vendorId);\n      console.log('Saving with:', {\n        processIds,\n        vendorIds,\n        lineItemProcesses\n      });\n      onSave({\n        ...lineItem,\n        processIds,\n        vendorIds,\n        lineItemProcesses: updatedProcesses\n      });\n    } catch (err) {\n      console.error('editpopup: Error saving processes:', err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Line Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n        sensors: sensors,\n        collisionDetection: closestCenter,\n        onDragEnd: handleDragEnd,\n        children: /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: lineItemProcesses.map(process => process.customId),\n          strategy: verticalListSortingStrategy,\n          children: lineItemProcesses.map(process => {\n            const id = process.customId;\n            const validProcess = process && id;\n            return validProcess ? /*#__PURE__*/_jsxDEV(SortableItem, {\n              id: id,\n              process: process // Pass the entire process object\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 17\n            }, this) : null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add New Process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newProcess.processId,\n          onChange: e => setNewProcess(prev => ({\n            ...prev,\n            processId: e.target.value\n          })),\n          style: {\n            marginRight: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Process\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this), processes.map(process => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: process.processId,\n            children: process.processId\n          }, process.processId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: newProcess.vendorId,\n          onChange: e => setNewProcess(prev => ({\n            ...prev,\n            vendorId: e.target.value\n          })),\n          style: {\n            marginRight: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Vendor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), vendors.map(vendor => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: vendor.vendorId,\n            children: vendor.vendorId\n          }, vendor.vendorId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddProcess,\n          style: {\n            padding: '5px 10px',\n            background: 'blue',\n            color: 'white'\n          },\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSave,\n          style: {\n            padding: '5px 10px',\n            background: 'green',\n            color: 'white'\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          style: {\n            padding: '5px 10px',\n            background: 'red',\n            color: 'white'\n          },\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s2(EditPopup, \"W+PxwCVPXgz2174vp/rBwsL3Xr0=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = EditPopup;\nexport default EditPopup;\nvar _c;\n$RefreshReg$(_c, \"EditPopup\");","map":{"version":3,"names":["React","useState","useEffect","fetchVendors","fetchProcesses","fetchLineItemProcesses","reorderLineItemProcesses","createLineItemProcess","deleteLineItemProcess","DndContext","closestCenter","arrayMove","SortableContext","useSortable","sortableKeyboardCoordinates","verticalListSortingStrategy","KeyboardSensor","PointerSensor","useSensor","useSensors","CSS","jsxDEV","_jsxDEV","EditPopup","lineItem","onClose","onSave","_s2","_s","$RefreshSig$","vendors","setVendors","processes","setProcesses","lineItemProcesses","setLineItemProcesses","newProcess","setNewProcess","processId","vendorId","draggedProcess","setDraggedProcess","loadInitialData","encodedLineItemId","encodeURIComponent","lineItemId","console","log","vendorData","processData","lineItemProcessData","forEach","item","index","_id","map","process","_process$_id","$oid","customId","sequence","err","error","message","sensors","coordinateGetter","SortableItem","id","attributes","listeners","setNodeRef","transform","transition","handleRemove","e","stopPropagation","prev","filter","style","Transform","toString","padding","margin","background","border","borderRadius","display","justifyContent","alignItems","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginLeft","color","cursor","handleDragEnd","event","active","over","warn","items","oldIndex","findIndex","newIndex","updatedItems","handleAddProcess","newSequence","length","newCustomId","isDuplicate","some","newEntry","response","updatedProcesses","handleSave","reorderedProcessesPayload","lineItemProcessId","_process$_id2","processIds","vendorIds","className","collisionDetection","onDragEnd","strategy","validProcess","marginTop","value","onChange","target","marginRight","vendor","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchVendors, fetchProcesses, fetchLineItemProcesses, reorderLineItemProcesses, createLineItemProcess, deleteLineItemProcess } from '../services/api';\nimport { DndContext, closestCenter } from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  useSortable,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { CSS } from '@dnd-kit/utilities';\n\nconst EditPopup = ({ lineItem, onClose, onSave }) => {\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [lineItemProcesses, setLineItemProcesses] = useState([]); // Existing LineItemProcesses\n  const [newProcess, setNewProcess] = useState({ processId: '', vendorId: '' });\n  const [draggedProcess, setDraggedProcess] = useState(null);\n\n  useEffect(() => {\n    // Fetch initial data for vendors, processes, and line item processes\n    const loadInitialData = async () => {\n      try {\n        const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n        console.log('editpopup: Encoded lineItemId:', encodedLineItemId);\n\n        // Fetch vendors\n        const vendorData = await fetchVendors();\n        console.log('editpopup: Fetched vendors:', vendorData);\n        setVendors(vendorData);\n\n        // Fetch processes\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n\n        // Fetch line item processes\n        const lineItemProcessData = await fetchLineItemProcesses(encodedLineItemId);\n        console.log('editpopup: Fetched line item processes:', lineItemProcessData);\n\n        // Log each item in lineItemProcessData\n        lineItemProcessData.forEach((item, index) => {\n          console.log(`editpopup: Line item process ${index}:`, item);\n          console.log(`editpopup: Line item process ${index} _id:`, item._id);\n        });\n\n        setLineItemProcesses(\n          lineItemProcessData.map((process, index) => ({\n            ...process,\n            _id: process._id?.$oid || `process-${index}`, // Extract the $oid property if it exists\n            customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${process.sequence}`,\n          }))\n          \n        );\n      } catch (err) {\n        console.error('editpopup: Error loading initial data:', err.message);\n      }\n    };\n\n    if (lineItem.lineItemId) {\n      loadInitialData(); // Fetch data if lineItemId is available\n    }\n  }, [lineItem.lineItemId]);\n\n  // Sensors for drag-and-drop\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Sortable item component\n  const SortableItem = ({ id, process }) => {\n    console.log('SortableItem props:', { id, process });\n\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({\n      id: id\n    });\n\n    if (!id || !process) {\n      console.error('SortableItem received undefined id or process:', { id, process });\n      return null;\n    }\n    \n\n    const handleRemove = async (e) => {\n      e.stopPropagation(); // Prevent drag event from triggering\n      try {\n        // Make sure we have both IDs\n        if (!lineItem.lineItemId || !process._id) {\n          console.error('Missing required IDs for deletion');\n          return;\n        }\n\n        console.log('Removing process:', {\n          lineItemId: lineItem.lineItemId,\n          processId: process._id\n        });\n\n        // Call delete API with the correct IDs\n        await deleteLineItemProcess(lineItem.lineItemId, process._id);\n\n        // Update state after successful deletion\n        setLineItemProcesses(prev =>\n          prev.filter(item => item._id !== process._id)\n        );\n      } catch (err) {\n        console.error('Error removing process:', err);\n      }\n    };\n\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition,\n      padding: '10px',\n      margin: '5px 0',\n      background: '#f8f8f8',\n      border: '1px solid #ddd',\n      borderRadius: '4px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    };\n\n    return (\n      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        <span>\n          Sequence: {process.sequence},\n          Process: {process.processId},\n          Vendor: {process.vendorId}\n        </span>\n        <button\n          onClick={handleRemove}\n          style={{\n            marginLeft: '10px',\n            color: 'red',\n            border: 'none',\n            background: 'none',\n            cursor: 'pointer',\n          }}\n        >\n          Remove\n        </button>\n      </div>\n    );\n  };\n\n  const handleDragEnd = (event) => {\n    if (!event || !event.active || !event.over) {\n      console.warn('handleDragEnd: Missing active or over:', event);\n      return;\n    }\n  \n    const { active, over } = event;\n  \n    if (!active.id || !over.id) {\n      console.warn('handleDragEnd: Missing ID in active or over:', { active, over });\n      return;\n    }\n  \n    console.log(`handleDragEnd: Moving ${active.id} over ${over.id}`);\n  \n    setLineItemProcesses((items) => {\n      const oldIndex = items.findIndex((item) => item.customId === active.id);\n      const newIndex = items.findIndex((item) => item.customId === over.id);\n  \n      if (oldIndex === -1 || newIndex === -1) {\n        console.warn('handleDragEnd: Invalid indices:', { oldIndex, newIndex });\n        return items;\n      }\n  \n      const updatedItems = arrayMove(items, oldIndex, newIndex);\n  \n      return updatedItems.map((item, index) => ({\n        ...item,\n        sequence: index + 1,\n        customId: `${item.lineItemId}/${item.vendorId}/${item.processId}/${index + 1}`,\n      }));\n    });\n  };\n  \n\n  const handleAddProcess = async () => {\n    if (!newProcess.processId || !newProcess.vendorId) {\n      console.warn('editpopup: Please select both a process and a vendor before adding.');\n      return;\n    }\n  \n    try {\n      // Generate sequence number based on current processes count\n      const newSequence = lineItemProcesses.length + 1;\n  \n      // Create a unique custom ID\n      const newCustomId = `${lineItem.lineItemId}/${newProcess.vendorId}/${newProcess.processId}/${newSequence}`;\n  \n      // Check if the same process already exists\n      const isDuplicate = lineItemProcesses.some(item => item.customId === newCustomId);\n      if (isDuplicate) {\n        console.warn(`editpopup: Process with ID ${newCustomId} already exists.`);\n        return;\n      }\n  \n      const newEntry = {\n        lineItemId: lineItem.lineItemId,\n        processId: newProcess.processId,\n        vendorId: newProcess.vendorId,\n        sequence: newSequence,\n        customId: newCustomId,\n      };\n  \n      console.log('editpopup: Sending new process to backend:', newEntry);\n  \n      // Save to backend and capture response\n      const response = await createLineItemProcess(newEntry);\n  \n      if (!response || response.error) {\n        console.error('editpopup: Backend error:', response?.error || 'Unknown error');\n        return;\n      }\n  \n      console.log('editpopup: Process successfully added:', response);\n  \n      // Fetch latest processes instead of appending manually (prevents stale data issues)\n      const updatedProcesses = await fetchLineItemProcesses(encodeURIComponent(lineItem.lineItemId));\n  \n      // Update state with the newly fetched list\n      setLineItemProcesses(\n        updatedProcesses.map((process, index) => ({\n          ...process,\n          sequence: index + 1, // Ensure correct sequence\n          customId: `${process.lineItemId}/${process.vendorId}/${process.processId}/${index + 1}`,\n        }))\n      );\n  \n      console.log('editpopup: Updated lineItemProcesses after addition:', updatedProcesses);\n  \n      // Reset form input\n      setNewProcess({ processId: '', vendorId: '' });\n  \n    } catch (err) {\n      console.error('editpopup: Error adding new process:', err);\n    }\n  };\n  \n  const handleSave = async () => {\n    try {\n      const encodedLineItemId = encodeURIComponent(lineItem.lineItemId); // Encode lineItemId\n      console.log(`editpopup: Encoded lineItemId for save: ${encodedLineItemId}`);\n\n      // Save reordered processes to backend\n      const reorderedProcessesPayload = lineItemProcesses.map((process) => ({\n        lineItemProcessId: process._id, // Ensure this matches the backend field\n        sequence: process.sequence,\n      }));\n      await reorderLineItemProcesses(encodedLineItemId, reorderedProcessesPayload);\n\n      console.log('editpopup: Saved reordered processes:', lineItemProcesses);\n\n      // Refetch updated processes to ensure the latest data is shown\n      const updatedProcesses = await fetchLineItemProcesses(encodedLineItemId);\n      setLineItemProcesses(\n        updatedProcesses.map((process, index) => ({\n          ...process,\n          _id: process._id?.$oid || `process-${index}`, // Extract the $oid property if it exists\n        }))\n      );\n\n      const processIds = updatedProcesses.map((item) => item.processId);\n      const vendorIds = updatedProcesses.map((item) => item.vendorId);\n\n      console.log('Saving with:', { processIds, vendorIds, lineItemProcesses });\n      onSave({ ...lineItem, processIds, vendorIds, lineItemProcesses: updatedProcesses });\n    } catch (err) {\n      console.error('editpopup: Error saving processes:', err.message);\n    }\n  };\n\n  return (\n    <div className=\"popup\">\n      <div className=\"popup-content\">\n        <h2>Edit Line Item</h2>\n\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragEnd={handleDragEnd}\n        >\n          <SortableContext\n            items={lineItemProcesses.map(process => process.customId)}\n            strategy={verticalListSortingStrategy}\n          >\n            {lineItemProcesses.map((process) => {\n              const id = process.customId;\n              const validProcess = process && id;\n\n              return validProcess ? (\n                <SortableItem\n                  key={id}\n                  id={id}\n                  process={process} // Pass the entire process object\n                />\n              ) : null;\n            })}\n          </SortableContext>\n        </DndContext>\n\n        <div style={{ marginTop: '20px' }}>\n          <h3>Add New Process</h3>\n          <select\n            value={newProcess.processId}\n            onChange={(e) => setNewProcess((prev) => ({ ...prev, processId: e.target.value }))}\n            style={{ marginRight: '10px' }}\n          >\n            <option value=\"\">Select Process</option>\n            {processes.map((process) => (\n              <option key={process.processId} value={process.processId}>\n                {process.processId}\n              </option>\n            ))}\n          </select>\n          <select\n            value={newProcess.vendorId}\n            onChange={(e) => setNewProcess((prev) => ({ ...prev, vendorId: e.target.value }))}\n            style={{ marginRight: '10px' }}\n          >\n            <option value=\"\">Select Vendor</option>\n            {vendors.map((vendor) => (\n              <option key={vendor.vendorId} value={vendor.vendorId}>\n                {vendor.vendorId}\n              </option>\n            ))}\n          </select>\n          <button onClick={handleAddProcess} style={{ padding: '5px 10px', background: 'blue', color: 'white' }}>\n            Add\n          </button>\n        </div>\n\n        <div style={{ marginTop: '20px' }}>\n          <button onClick={handleSave} style={{ padding: '5px 10px', background: 'green', color: 'white' }}>\n            Save\n          </button>\n          <button onClick={onClose} style={{ padding: '5px 10px', background: 'red', color: 'white' }}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EditPopup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}