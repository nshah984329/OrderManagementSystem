{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/CreateVendor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { createVendor, fetchProcesses, createVendorProcess } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateVendor = () => {\n  _s();\n  const [vendor, setVendor] = useState({\n    vendorId: '',\n    contact: '',\n    location: ''\n  });\n  const [message, setMessage] = useState('');\n  const [processes, setProcesses] = useState([]); // List of available processes\n  const [selectedProcesses, setSelectedProcesses] = useState([]); // Selected processes for the vendor\n\n  // Fetch processes on component mount\n  useEffect(() => {\n    const loadProcesses = async () => {\n      try {\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n      } catch (err) {\n        console.error('Error fetching processes:', err.message);\n      }\n    };\n    loadProcesses();\n  }, []);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setVendor(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleProcessSelection = e => {\n    const {\n      value\n    } = e.target;\n    setSelectedProcesses(prev => prev.includes(value) ? prev.filter(process => process !== value) : [...prev, value]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Step 1: Create the vendor\n      const createdVendor = await createVendor(vendor);\n      if (!createdVendor.vendorId) {\n        throw new Error('Vendor creation failed. vendorId not returned.');\n      }\n      const vendorId = createdVendor.vendorId; // Extract vendorId from the response\n\n      // Step 2: Link each selected process to the vendor\n      const vendorProcessPromises = selectedProcesses.map(processId => createVendorProcess({\n        vendorId,\n        processId\n      }));\n      await Promise.all(vendorProcessPromises);\n      setMessage('Vendor and processes linked successfully!');\n      setVendor({\n        vendorId: '',\n        contact: '',\n        location: ''\n      });\n      setSelectedProcesses([]);\n    } catch (err) {\n      console.error('Error creating vendor or linking processes:', err.message);\n      setMessage('Failed to create vendor or link processes.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create Vendor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"vendorId\",\n        placeholder: \"Vendor ID\",\n        value: vendor.vendorId,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"contact\",\n        placeholder: \"Contact\",\n        value: vendor.contact,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"location\",\n        placeholder: \"Location\",\n        value: vendor.location,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select Processes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), processes.length > 0 ? processes.map(process => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: process._Id,\n            value: process.processId,\n            checked: selectedProcesses.includes(process.processId),\n            onChange: handleProcessSelection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: process.processId,\n            children: process.processId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)]\n        }, process.processId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No processes available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Vendor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateVendor, \"NA3pTZRWFzWOF1tc7Avrg3ty860=\");\n_c = CreateVendor;\nexport default CreateVendor;\nvar _c;\n$RefreshReg$(_c, \"CreateVendor\");","map":{"version":3,"names":["React","useState","useEffect","createVendor","fetchProcesses","createVendorProcess","jsxDEV","_jsxDEV","CreateVendor","_s","vendor","setVendor","vendorId","contact","location","message","setMessage","processes","setProcesses","selectedProcesses","setSelectedProcesses","loadProcesses","processData","console","log","err","error","handleChange","e","name","value","target","prev","handleProcessSelection","includes","filter","process","handleSubmit","preventDefault","createdVendor","Error","vendorProcessPromises","map","processId","Promise","all","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","required","length","id","_Id","checked","htmlFor","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/CreateVendor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { createVendor, fetchProcesses, createVendorProcess } from '../services/api';\n\nconst CreateVendor = () => {\n  const [vendor, setVendor] = useState({ vendorId: '', contact: '', location: '' });\n  const [message, setMessage] = useState('');\n  const [processes, setProcesses] = useState([]); // List of available processes\n  const [selectedProcesses, setSelectedProcesses] = useState([]); // Selected processes for the vendor\n\n  // Fetch processes on component mount\n  useEffect(() => {\n    const loadProcesses = async () => {\n      try {\n        const processData = await fetchProcesses();\n        console.log('editpopup: Fetched processes:', processData);\n        setProcesses(processData);\n      } catch (err) {\n        console.error('Error fetching processes:', err.message);\n      }\n    };\n    loadProcesses();\n  }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setVendor((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleProcessSelection = (e) => {\n    const { value } = e.target;\n    setSelectedProcesses((prev) =>\n      prev.includes(value) ? prev.filter((process) => process !== value) : [...prev, value]\n    );\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // Step 1: Create the vendor\n      const createdVendor = await createVendor(vendor);\n  \n      if (!createdVendor.vendorId) {\n        throw new Error('Vendor creation failed. vendorId not returned.');\n      }\n  \n      const vendorId = createdVendor.vendorId; // Extract vendorId from the response\n  \n      // Step 2: Link each selected process to the vendor\n      const vendorProcessPromises = selectedProcesses.map((processId) =>\n        createVendorProcess({ vendorId, processId })\n      );\n      await Promise.all(vendorProcessPromises);\n  \n      setMessage('Vendor and processes linked successfully!');\n      setVendor({ vendorId: '', contact: '', location: '' });\n      setSelectedProcesses([]);\n    } catch (err) {\n      console.error('Error creating vendor or linking processes:', err.message);\n      setMessage('Failed to create vendor or link processes.');\n    }\n  };\n  \n\n  return (\n    <div>\n      <h1>Create Vendor</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"vendorId\"\n          placeholder=\"Vendor ID\"\n          value={vendor.vendorId}\n          onChange={handleChange}\n          required\n        />\n        <input\n          type=\"text\"\n          name=\"contact\"\n          placeholder=\"Contact\"\n          value={vendor.contact}\n          onChange={handleChange}\n        />\n        <input\n          type=\"text\"\n          name=\"location\"\n          placeholder=\"Location\"\n          value={vendor.location}\n          onChange={handleChange}\n        />\n        <div>\n          <h3>Select Processes</h3>\n          {processes.length > 0 ? (\n            processes.map((process) => (\n              <div key={process.processId}>\n                <input\n                  type=\"checkbox\"\n                  id={process._Id}\n                  value={process.processId}\n                  checked={selectedProcesses.includes(process.processId)}\n                  onChange={handleProcessSelection}\n                />\n                <label htmlFor={process.processId}>{process.processId}</label>\n              </div>\n            ))\n          ) : (\n            <p>No processes available</p>\n          )}\n        </div>\n        <button type=\"submit\">Create Vendor</button>\n      </form>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default CreateVendor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}