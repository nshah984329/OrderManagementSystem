{"ast":null,"code":"var _jsxFileName = \"/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchVendors, fetchProcesses } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPopup = ({\n  lineItem,\n  onClose,\n  onSave\n}) => {\n  _s();\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [selectedVendorIds, setSelectedVendorIds] = useState(lineItem.vendorIds || []); // Selected vendors\n  const [selectedProcessIds, setSelectedProcessIds] = useState(lineItem.processIds || []); // Selected processes\n\n  // Fetch vendors and processes on dropdown interaction\n  const fetchVendorsOnClick = async () => {\n    if (vendors.length > 0) return; // Avoid redundant fetches\n    try {\n      const vendorsData = await fetchVendors();\n      console.log('Fetched Vendors:', vendorsData); // Debugging log\n      setVendors(vendorsData);\n    } catch (err) {\n      console.error('Error fetching vendors:', err.message);\n    }\n  };\n  const fetchProcessesOnClick = async () => {\n    if (processes.length > 0) return; // Avoid redundant fetches\n    try {\n      const processesData = await fetchProcesses();\n      console.log('Fetched Processes:', processesData); // Debugging log\n      setProcesses(processesData);\n    } catch (err) {\n      console.error('Error fetching processes:', err.message);\n    }\n  };\n\n  // Handle dropdown changes\n  const handleVendorChange = e => {\n    const value = e.target.value;\n    console.log('Selected Vendor ID:', value); // Debugging log\n    setSelectedVendorIds(value ? [value] : []);\n  };\n  const handleProcessChange = e => {\n    const value = e.target.value;\n    console.log('Selected Process ID:', value); // Debugging log\n    setSelectedProcessIds(value ? [value] : []);\n  };\n\n  // Save the changes\n  const handleSave = () => {\n    onSave({\n      ...lineItem,\n      vendorIds: selectedVendorIds,\n      processIds: selectedProcessIds\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Line Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"vendors\",\n        children: \"Select Vendor:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"vendors\",\n        value: selectedVendorIds[0] || '',\n        onChange: handleVendorChange,\n        onClick: fetchVendorsOnClick // Fetch vendors dynamically\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: vendors.length === 0 ? 'Loading vendors...' : 'Select a vendor'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), vendors.map(vendor => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: vendor.id,\n          children: vendor.name\n        }, vendor.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"processes\",\n        children: \"Select Process:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"processes\",\n        value: selectedProcessIds[0] || '',\n        onChange: handleProcessChange,\n        onClick: fetchProcessesOnClick // Fetch processes dynamically\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: processes.length === 0 ? 'Loading processes...' : 'Select a process'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), processes.map(process => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: process.id,\n          children: process.name\n        }, process.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPopup, \"CLUGfYjAn6YVzcAhpnRMF7It2vc=\");\n_c = EditPopup;\nexport default EditPopup;\nvar _c;\n$RefreshReg$(_c, \"EditPopup\");","map":{"version":3,"names":["React","useState","useEffect","fetchVendors","fetchProcesses","jsxDEV","_jsxDEV","EditPopup","lineItem","onClose","onSave","_s","vendors","setVendors","processes","setProcesses","selectedVendorIds","setSelectedVendorIds","vendorIds","selectedProcessIds","setSelectedProcessIds","processIds","fetchVendorsOnClick","length","vendorsData","console","log","err","error","message","fetchProcessesOnClick","processesData","handleVendorChange","e","value","target","handleProcessChange","handleSave","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","onClick","disabled","map","vendor","name","process","_c","$RefreshReg$"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/pages/EditPopup.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchVendors, fetchProcesses } from '../services/api';\n\nconst EditPopup = ({ lineItem, onClose, onSave }) => {\n  const [vendors, setVendors] = useState([]); // Vendor list\n  const [processes, setProcesses] = useState([]); // Process list\n  const [selectedVendorIds, setSelectedVendorIds] = useState(lineItem.vendorIds || []); // Selected vendors\n  const [selectedProcessIds, setSelectedProcessIds] = useState(lineItem.processIds || []); // Selected processes\n\n  // Fetch vendors and processes on dropdown interaction\n  const fetchVendorsOnClick = async () => {\n    if (vendors.length > 0) return; // Avoid redundant fetches\n    try {\n      const vendorsData = await fetchVendors();\n      console.log('Fetched Vendors:', vendorsData); // Debugging log\n      setVendors(vendorsData);\n    } catch (err) {\n      console.error('Error fetching vendors:', err.message);\n    }\n  };\n\n  const fetchProcessesOnClick = async () => {\n    if (processes.length > 0) return; // Avoid redundant fetches\n    try {\n      const processesData = await fetchProcesses();\n      console.log('Fetched Processes:', processesData); // Debugging log\n      setProcesses(processesData);\n    } catch (err) {\n      console.error('Error fetching processes:', err.message);\n    }\n  };\n\n  // Handle dropdown changes\n  const handleVendorChange = (e) => {\n    const value = e.target.value;\n    console.log('Selected Vendor ID:', value); // Debugging log\n    setSelectedVendorIds(value ? [value] : []);\n  };\n\n  const handleProcessChange = (e) => {\n    const value = e.target.value;\n    console.log('Selected Process ID:', value); // Debugging log\n    setSelectedProcessIds(value ? [value] : []);\n  };\n\n  // Save the changes\n  const handleSave = () => {\n    onSave({\n      ...lineItem,\n      vendorIds: selectedVendorIds,\n      processIds: selectedProcessIds,\n    });\n  };\n\n  return (\n    <div className=\"popup\">\n      <div className=\"popup-content\">\n        <h2>Edit Line Item</h2>\n\n        {/* Vendor Dropdown */}\n        <label htmlFor=\"vendors\">Select Vendor:</label>\n        <select\n          id=\"vendors\"\n          value={selectedVendorIds[0] || ''}\n          onChange={handleVendorChange}\n          onClick={fetchVendorsOnClick} // Fetch vendors dynamically\n        >\n          <option value=\"\" disabled>\n            {vendors.length === 0 ? 'Loading vendors...' : 'Select a vendor'}\n          </option>\n          {vendors.map((vendor) => (\n            <option key={vendor.id} value={vendor.id}>\n              {vendor.name}\n            </option>\n          ))}\n        </select>\n\n        {/* Process Dropdown */}\n        <label htmlFor=\"processes\">Select Process:</label>\n        <select\n          id=\"processes\"\n          value={selectedProcessIds[0] || ''}\n          onChange={handleProcessChange}\n          onClick={fetchProcessesOnClick} // Fetch processes dynamically\n        >\n          <option value=\"\" disabled>\n            {processes.length === 0 ? 'Loading processes...' : 'Select a process'}\n          </option>\n          {processes.map((process) => (\n            <option key={process.id} value={process.id}>\n              {process.name}\n            </option>\n          ))}\n        </select>\n\n        {/* Save and Cancel Buttons */}\n        <button onClick={handleSave}>Save</button>\n        <button onClick={onClose}>Cancel</button>\n      </div>\n    </div>\n  );\n};\n\nexport default EditPopup;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}