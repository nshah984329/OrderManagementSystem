import React, { useState, useEffect } from 'react';
import { fetchVendors, fetchProcesses, fetchLineItemProcesses, reorderLineItemProcesses } from '../services/api';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

const EditPopup = ({ lineItem, onClose, onSave }) => {
  const [lineItemProcesses, setLineItemProcesses] = useState([]); // Line item processes
  const [vendors, setVendors] = useState([]); // Vendor list
  const [processes, setProcesses] = useState([]); // Process list
  const [message, setMessage] = useState('');

  // Fetch line item processes on load
  useEffect(() => {
    const loadLineItemProcesses = async () => {
      try {
        const data = await fetchLineItemProcesses(lineItem.lineItemId);
        setLineItemProcesses(data);
      } catch (err) {
        console.error('Error fetching line item processes:', err.message);
      }
    };
    loadLineItemProcesses();
  }, [lineItem.lineItemId]);

  // Fetch vendors
  useEffect(() => {
    const loadVendors = async () => {
      try {
        const data = await fetchVendors();
        setVendors(data);
      } catch (err) {
        console.error('Error fetching vendors:', err.message);
      }
    };
    loadVendors();
  }, []);

  // Fetch processes
  useEffect(() => {
    const loadProcesses = async () => {
      try {
        const data = await fetchProcesses();
        setProcesses(data);
      } catch (err) {
        console.error('Error fetching processes:', err.message);
      }
    };
    loadProcesses();
  }, []);

  // Handle drag-and-drop reordering
  const handleDragEnd = async (result) => {
    if (!result.destination) return;

    const items = Array.from(lineItemProcesses);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    // Update sequence based on new order
    const reorderedProcesses = items.map((item, index) => ({
      ...item,
      sequence: index + 1,
    }));

    setLineItemProcesses(reorderedProcesses);

    try {
      await reorderLineItemProcesses(lineItem.lineItemId, reorderedProcesses);
      setMessage('Sequence updated successfully!');
    } catch (err) {
      console.error('Error updating sequence:', err.message);
      setMessage('Failed to update sequence.');
    }
  };

  // Save the changes
  const handleSave = () => {
    onSave(lineItemProcesses);
  };

  return (
    <div className="popup">
      <div className="popup-content">
        <h2>Edit Line Item</h2>

        {/* Drag-and-Drop List */}
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="processList">
            {(provided) => (
              <ul {...provided.droppableProps} ref={provided.innerRef}>
                {lineItemProcesses.map((item, index) => (
                  <Draggable key={item._id} draggableId={item._id} index={index}>
                    {(provided) => (
                      <li
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                      >
                        <p>
                          Sequence: {item.sequence} | Process: {item.processId} | Vendor: {item.vendorId}
                        </p>
                      </li>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </ul>
            )}
          </Droppable>
        </DragDropContext>

        {/* Save and Cancel Buttons */}
        <button onClick={handleSave}>Save</button>
        <button onClick={onClose}>Cancel</button>
      </div>
      {message && <p>{message}</p>}
    </div>
  );
};

export default EditPopup;
