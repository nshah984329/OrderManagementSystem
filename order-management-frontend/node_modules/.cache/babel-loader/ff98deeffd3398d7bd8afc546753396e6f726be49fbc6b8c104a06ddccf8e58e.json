{"ast":null,"code":"// File: src/services/api.js\nimport axios from 'axios';\nconst API = axios.create({\n  baseURL: 'https://munani.onrender.com'\n});\n\n// Orders\nexport const fetchOrders = () => API.get('/orders');\nexport const createOrder = async order => {\n  try {\n    const response = await API.post('/orders', {\n      creator: order.creator,\n      responsible: order.responsible,\n      company: order.company\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error creating order:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchOrder = async orderId => {\n  try {\n    if (!orderId) {\n      throw new Error('orderId is required to fetch an order');\n    }\n    const response = await API.get(`/orders/${orderId}`);\n    console.log('Order API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error fetching order from API:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\nexport const updateOrder = async (orderId, updates) => {\n  try {\n    const response = await API.put(`/orders/${orderId}`, updates);\n    console.log('Updated Order API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error('Error updating order:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\nexport const deleteOrder = async orderId => {\n  try {\n    const response = await API.delete(`/orders/${orderId}`);\n    console.log('Deleted Order API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error('Error deleting order:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchNextOrderId = async () => {\n  try {\n    const response = await API.get('/orders/nextId');\n    console.log('Next Order ID API response:', response.data);\n    return response.data.nextOrderId;\n  } catch (error) {\n    var _error$response5;\n    console.error('Error fetching next order ID:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\n\n// Line Items\nexport const fetchLineItems = orderId => API.get(`/lineitems/orders/${orderId}`);\nexport const fetchLineItemDetails = async lineItemId => {\n  try {\n    const encodedId = encodeURIComponent(lineItemId);\n    const response = await API.get(`/lineitems/${encodedId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    console.error('❌ Error fetching line item details:', ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw error;\n  }\n};\nexport const createLineItem = async lineItem => {\n  try {\n    const response = await API.post('/lineitems', lineItem);\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    console.error('Error creating line item:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw error;\n  }\n};\nexport const editLineitem = (lineItemId, data) => API.put(`/lineitems/${lineItemId}`, data);\nexport const deleteLineItem = async lineItemId => {\n  try {\n    const encodedId = lineItemId; // Ensure encoding\n    const response = await API.delete(`/lineitems/${encodedId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response8;\n    console.error('❌ Error deleting line item:', ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message);\n    throw error;\n  }\n};\n\n// Processes\nexport const fetchProcesses = async () => {\n  try {\n    const response = await API.get('/processes');\n    console.log('Processes API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response9;\n    console.error('Error fetching processes from API:', ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message);\n    throw error;\n  }\n};\nexport const createProcess = process => API.post('/processes', process);\n\n// Vendors\nexport const fetchVendors = async () => {\n  try {\n    const response = await API.get('/vendors');\n    console.log('Vendors API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response10;\n    console.error('Error fetching vendors from API:', ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || error.message);\n    throw error;\n  }\n};\nexport const createVendor = async vendor => {\n  try {\n    const response = await API.post('/vendors', vendor);\n    console.log('createVendor response:', response.data); // Log the response\n    return response.data; // Return the response\n  } catch (error) {\n    var _error$response11;\n    console.error('Error creating vendor:', ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message);\n    throw error;\n  }\n};\n\n// Shapes\nexport const fetchShapes = async () => {\n  try {\n    const response = await API.get('/shapes');\n    console.log('Shapes API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response12;\n    console.error('Error fetching shapes from API:', ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || error.message);\n    throw error;\n  }\n};\nexport const createShape = shape => API.post('/shapes', shape);\n\n// Grades\nexport const fetchGrades = async () => {\n  try {\n    const response = await API.get('/grades');\n    console.log('Grades API response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response13;\n    console.error('Error fetching grades from API:', ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message);\n    throw error;\n  }\n};\nexport const createGrade = grade => API.post('/grades', grade);\nexport const createLineItemProcess = async lineItemProcess => {\n  const response = await API.post('/lineitemprocesses', lineItemProcess);\n  return response.data;\n};\n\n// Fetch processes for a specific LineItem\nexport const fetchLineItemProcesses = async lineItemId => {\n  try {\n    const encodedId = encodeURIComponent(lineItemId);\n    console.log('Fetching line item processes for:', encodedId);\n    const response = await API.get(`/lineitemprocesses/${encodedId}`);\n    const processes = response.data.map((process, index) => ({\n      ...process,\n      _id: process._id || `fallback-${index}`,\n      sequence: process.sequence || index + 1,\n      processId: process.processId || 'N/A',\n      vendorId: process.vendorId || 'N/A'\n    }));\n    console.log('Fetched and processed line item processes:', processes);\n    return processes;\n  } catch (error) {\n    console.error('Error fetching line item processes:', error.message);\n    throw error;\n  }\n};\n\n// Reorder LineItemProcesses\nexport const reorderLineItemProcesses = async (lineItemId, reorderedProcesses) => {\n  const encodedId = encodeURIComponent(lineItemId); // Encode the ID\n  const response = await API.put(`/lineitemprocesses/reorder/${encodedId}`, {\n    reorderedProcesses\n  });\n  return response.data;\n};\n\n// Update a specific LineItemProcess\nexport const updateLineItemProcess = async (lineItemProcessId, updates) => {\n  const encodedId = encodeURIComponent(lineItemProcessId); // Encode the ID\n  const response = await API.put(`/lineitemprocesses/${encodedId}`, updates);\n  return response.data;\n};\n\n// Delete a specific LineItemProcess\nexport const deleteLineItemProcess = async lineItemProcessId => {\n  const encodedId = encodeURIComponent(lineItemProcessId); // Encode the ID\n  const response = await API.delete(`/lineitemprocesses/${encodedId}`);\n  return response.data;\n};\nexport const createVendorProcess = vendorProcess => API.post('/vendorProcesses', vendorProcess);\n\n// VendorProcesses\nexport const fetchVendorProcesses = async vendorId => {\n  try {\n    const encodedVendorId = encodeURIComponent(vendorId); // Encode vendorId\n    const response = await API.get(`/vendorprocesses/${encodedVendorId}`);\n    if (response.data.vendorProcesses && response.data.vendorProcesses.length === 0) {\n      console.log(response.data.message); // Log the \"No processes linked\" message\n    }\n    return response.data.vendorProcesses || []; // Return an empty array if no processes are found\n  } catch (error) {\n    var _error$response14;\n    console.error('Error fetching vendor processes:', ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchAllVendorProcesses = async () => {\n  try {\n    const response = await API.get(`/vendorprocesses`);\n    console.log('fetchAllVendorProcesses Response:', response.data); // DEBUG LOG\n\n    //if (!response.ok) throw new Error('Failed to fetch vendor processes');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching vendor processes:', error);\n    return [];\n  }\n};\nexport const updateVendor = async (id, updates) => {\n  try {\n    const response = await API.put(`/vendors/${id}`, updates);\n    console.log('Updated vendor:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response15;\n    console.error('Error updating vendor:', ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data) || error.message);\n    throw error;\n  }\n};\nexport const deleteVendorProcess = async vendorProcess => {\n  try {\n    const response = await API.delete('/vendorprocesses', {\n      data: vendorProcess\n    });\n    console.log('Deleted vendor process:', response.data);\n    return response.data; // Return success message\n  } catch (error) {\n    var _error$response16;\n    console.error('Error deleting vendor process:', ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data) || error.message);\n    throw error;\n  }\n};\n// ================= Execution Details APIs =================\n\n// 1. Fetch Execution Details Grouped by Process-Vendor\nexport const fetchExecutionDetailsGrouped = async () => {\n  try {\n    const response = await API.get('/executiondetails/grouped');\n    if (!Array.isArray(response.data)) {\n      console.warn(\"⚠️ Unexpected response format from /executiondetails/grouped:\", response.data);\n      return [];\n    }\n    console.log('✅ Execution Details (Grouped):', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response17;\n    console.error('❌ Error fetching execution details (grouped):', ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || error.message);\n    return []; // Ensure we return an empty array instead of throwing an error\n  }\n};\n\n// 2. Create Execution Details (Multiple Line Items under a Process-Vendor)\nexport const addExecutionDetails = async executionData => {\n  try {\n    // ✅ Validate required fields\n    const requiredFields = ['lineItemId', 'orderId', 'processId', 'vendorId', 'outWeight', 'dateSent', 'piecesSent'];\n    const missingFields = requiredFields.filter(field => !executionData[field]);\n    if (missingFields.length > 0) {\n      console.error(\"🚨 Missing required fields:\", missingFields);\n      throw new Error(`Missing fields: ${missingFields.join(', ')}`);\n    }\n\n    // ✅ Ensure processId & vendorId are strings\n    executionData.processId = String(executionData.processId);\n    executionData.vendorId = String(executionData.vendorId);\n    console.log(\"✅ Sending Execution Details:\", executionData);\n    const response = await API.post('/executiondetails', executionData);\n    console.log('✅ Execution Details Created:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response18;\n    console.error('❌ Error adding execution details:', ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : _error$response18.data) || error.message);\n    throw error;\n  }\n};\n\n// 3. Update Execution Details (Received Materials & Status)\nexport const updateExecutionDetails = async (executionId, updateData) => {\n  try {\n    if (!executionId || typeof executionId !== 'string') {\n      throw new Error(\"Invalid execution ID provided\");\n    }\n    if (!updateData || typeof updateData !== 'object') {\n      throw new Error(\"Invalid update data provided\");\n    }\n    console.log(`🔄 Updating Execution ${executionId}:`, updateData);\n    const response = await API.put(`/executiondetails/${executionId}`, updateData);\n    console.log('✅ Execution Details Updated:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response19;\n    console.error('❌ Error updating execution details:', ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || error.message);\n    throw error;\n  }\n};\n\n// 4. Fetch Execution Details for a Specific Line Item\nexport const fetchExecutionDetailsForLineItem = async lineItemId => {\n  try {\n    if (!lineItemId) throw new Error(\"lineItemId is required\");\n    const encodedId = encodeURIComponent(lineItemId);\n    const response = await API.get(`/executiondetails/lineitem/${encodedId}`);\n    console.log('✅ Execution Details for Line Item:', response.data);\n\n    // ✅ Ensure response is always an array\n    return Array.isArray(response.data) ? response.data : [];\n  } catch (error) {\n    var _error$response20, _error$response21;\n    if (((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : _error$response20.status) === 404) {\n      console.warn(`⚠️ No execution details found for lineItemId: ${lineItemId}`);\n      return [];\n    }\n    console.error('❌ Error fetching execution details for line item:', ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || error.message);\n    throw error;\n  }\n};\n\n// 5. Delete Execution Details (For a Vendor-Process)\nexport const deleteExecutionDetails = async executionId => {\n  try {\n    if (!executionId) throw new Error(\"executionId is required\");\n    console.log(`🗑 Deleting Execution ID: ${executionId}`);\n    const response = await API.delete(`/executiondetails/${executionId}`);\n    console.log('✅ Execution Details Deleted:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response22;\n    console.error('❌ Error deleting execution details:', ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : _error$response22.data) || error.message);\n    throw error;\n  }\n};\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","fetchOrders","get","createOrder","order","response","post","creator","responsible","company","data","error","_error$response","console","message","fetchOrder","orderId","Error","log","_error$response2","updateOrder","updates","put","_error$response3","deleteOrder","delete","_error$response4","fetchNextOrderId","nextOrderId","_error$response5","fetchLineItems","fetchLineItemDetails","lineItemId","encodedId","encodeURIComponent","_error$response6","createLineItem","lineItem","_error$response7","editLineitem","deleteLineItem","_error$response8","fetchProcesses","_error$response9","createProcess","process","fetchVendors","_error$response10","createVendor","vendor","_error$response11","fetchShapes","_error$response12","createShape","shape","fetchGrades","_error$response13","createGrade","grade","createLineItemProcess","lineItemProcess","fetchLineItemProcesses","processes","map","index","_id","sequence","processId","vendorId","reorderLineItemProcesses","reorderedProcesses","updateLineItemProcess","lineItemProcessId","deleteLineItemProcess","createVendorProcess","vendorProcess","fetchVendorProcesses","encodedVendorId","vendorProcesses","length","_error$response14","fetchAllVendorProcesses","updateVendor","id","_error$response15","deleteVendorProcess","_error$response16","fetchExecutionDetailsGrouped","Array","isArray","warn","_error$response17","addExecutionDetails","executionData","requiredFields","missingFields","filter","field","join","String","_error$response18","updateExecutionDetails","executionId","updateData","_error$response19","fetchExecutionDetailsForLineItem","_error$response20","_error$response21","status","deleteExecutionDetails","_error$response22"],"sources":["/Users/nshah/GPT Project/order-management-frontend/src/services/api.js"],"sourcesContent":["// File: src/services/api.js\nimport axios from 'axios';\n\nconst API = axios.create({\n  baseURL: 'https://munani.onrender.com',\n});\n\n// Orders\nexport const fetchOrders = () => API.get('/orders');\n\nexport const createOrder = async (order) => {\n  try {\n    const response = await API.post('/orders', {\n      creator: order.creator,\n      responsible: order.responsible,\n      company: order.company,\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const fetchOrder = async (orderId) => {\n  try {\n    if (!orderId) {\n      throw new Error('orderId is required to fetch an order');\n    }\n    const response = await API.get(`/orders/${orderId}`);\n    console.log('Order API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching order from API:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const updateOrder = async (orderId, updates) => {\n  try {\n    const response = await API.put(`/orders/${orderId}`, updates);\n    console.log('Updated Order API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating order:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const deleteOrder = async (orderId) => {\n  try {\n    const response = await API.delete(`/orders/${orderId}`);\n    console.log('Deleted Order API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting order:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const fetchNextOrderId = async () => {\n  try {\n    const response = await API.get('/orders/nextId');\n    console.log('Next Order ID API response:', response.data);\n    return response.data.nextOrderId;\n  } catch (error) {\n    console.error('Error fetching next order ID:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n// Line Items\nexport const fetchLineItems = (orderId) => API.get(`/lineitems/orders/${orderId}`);\nexport const fetchLineItemDetails = async (lineItemId) => {\n  try {\n    const encodedId = encodeURIComponent(lineItemId);\n    const response = await API.get(`/lineitems/${encodedId}`);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error fetching line item details:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const createLineItem = async (lineItem) => {\n  try {\n    const response = await API.post('/lineitems', lineItem);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating line item:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const editLineitem = (lineItemId, data) => API.put(`/lineitems/${lineItemId}`, data);\n\nexport const deleteLineItem = async (lineItemId) => {\n  try {\n    const encodedId = lineItemId; // Ensure encoding\n    const response = await API.delete(`/lineitems/${encodedId}`);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error deleting line item:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n\n// Processes\nexport const fetchProcesses = async () => {\n  try {\n    const response = await API.get('/processes');\n    console.log('Processes API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching processes from API:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const createProcess = (process) => API.post('/processes', process);\n\n// Vendors\nexport const fetchVendors = async () => {\n  try {\n    const response = await API.get('/vendors');\n    console.log('Vendors API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching vendors from API:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const createVendor = async (vendor) => {\n  try {\n    const response = await API.post('/vendors', vendor);\n    console.log('createVendor response:', response.data); // Log the response\n    return response.data; // Return the response\n  } catch (error) {\n    console.error('Error creating vendor:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n\n// Shapes\nexport const fetchShapes = async () => {\n  try {\n    const response = await API.get('/shapes');\n    console.log('Shapes API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching shapes from API:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const createShape = (shape) => API.post('/shapes', shape);\n\n// Grades\nexport const fetchGrades = async () => {\n  try {\n    const response = await API.get('/grades');\n    console.log('Grades API response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching grades from API:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const createGrade = (grade) => API.post('/grades', grade);\n\nexport const createLineItemProcess = async (lineItemProcess) => {\n  const response = await API.post('/lineitemprocesses', lineItemProcess);\n  return response.data;\n};\n\n// Fetch processes for a specific LineItem\nexport const fetchLineItemProcesses = async (lineItemId) => {\n  try {\n    const encodedId = encodeURIComponent(lineItemId);\n    console.log('Fetching line item processes for:', encodedId);\n\n    const response = await API.get(`/lineitemprocesses/${encodedId}`);\n    const processes = response.data.map((process, index) => ({\n      ...process,\n      _id: process._id || `fallback-${index}`,\n      sequence: process.sequence || index + 1,\n      processId: process.processId || 'N/A',\n      vendorId: process.vendorId || 'N/A',\n    }));\n\n    console.log('Fetched and processed line item processes:', processes);\n    return processes;\n  } catch (error) {\n    console.error('Error fetching line item processes:', error.message);\n    throw error;\n  }\n};\n\n\n// Reorder LineItemProcesses\nexport const reorderLineItemProcesses = async (lineItemId, reorderedProcesses) => {\n  const encodedId = encodeURIComponent(lineItemId); // Encode the ID\n  const response = await API.put(`/lineitemprocesses/reorder/${encodedId}`, { reorderedProcesses });\n  return response.data;\n};\n\n// Update a specific LineItemProcess\nexport const updateLineItemProcess = async (lineItemProcessId, updates) => {\n  const encodedId = encodeURIComponent(lineItemProcessId); // Encode the ID\n  const response = await API.put(`/lineitemprocesses/${encodedId}`, updates);\n  return response.data;\n};\n\n// Delete a specific LineItemProcess\nexport const deleteLineItemProcess = async (lineItemProcessId) => {\n  const encodedId = encodeURIComponent(lineItemProcessId); // Encode the ID\n  const response = await API.delete(`/lineitemprocesses/${encodedId}`);\n  return response.data;\n};\n\nexport const createVendorProcess = (vendorProcess) => API.post('/vendorProcesses', vendorProcess);\n\n// VendorProcesses\nexport const fetchVendorProcesses = async (vendorId) => {\n  try {\n    const encodedVendorId = encodeURIComponent(vendorId); // Encode vendorId\n    const response = await API.get(`/vendorprocesses/${encodedVendorId}`);\n    \n    if (response.data.vendorProcesses && response.data.vendorProcesses.length === 0) {\n      console.log(response.data.message); // Log the \"No processes linked\" message\n    }\n\n    return response.data.vendorProcesses || []; // Return an empty array if no processes are found\n  } catch (error) {\n    console.error('Error fetching vendor processes:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\nexport const fetchAllVendorProcesses = async () => {\n  try {\n    const response = await API.get(`/vendorprocesses`);\n    console.log('fetchAllVendorProcesses Response:', response.data); // DEBUG LOG\n\n    //if (!response.ok) throw new Error('Failed to fetch vendor processes');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching vendor processes:', error);\n    return [];\n  }\n};\n\n\n\n\nexport const updateVendor = async (id, updates) => {\n  try {\n    const response = await API.put(`/vendors/${id}`, updates);\n    console.log('Updated vendor:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating vendor:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n\n\nexport const deleteVendorProcess = async (vendorProcess) => {\n  try {\n    const response = await API.delete('/vendorprocesses', { data: vendorProcess });\n    console.log('Deleted vendor process:', response.data);\n    return response.data; // Return success message\n  } catch (error) {\n    console.error('Error deleting vendor process:', error.response?.data || error.message);\n    throw error;\n  }\n};\n// ================= Execution Details APIs =================\n\n// 1. Fetch Execution Details Grouped by Process-Vendor\nexport const fetchExecutionDetailsGrouped = async () => {\n  try {\n    const response = await API.get('/executiondetails/grouped');\n    \n    if (!Array.isArray(response.data)) {\n      console.warn(\"⚠️ Unexpected response format from /executiondetails/grouped:\", response.data);\n      return [];\n    }\n    \n    console.log('✅ Execution Details (Grouped):', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error fetching execution details (grouped):', error.response?.data || error.message);\n    return []; // Ensure we return an empty array instead of throwing an error\n  }\n};\n\n\n// 2. Create Execution Details (Multiple Line Items under a Process-Vendor)\nexport const addExecutionDetails = async (executionData) => {\n  try {\n    // ✅ Validate required fields\n    const requiredFields = ['lineItemId', 'orderId', 'processId', 'vendorId', 'outWeight', 'dateSent', 'piecesSent'];\n    const missingFields = requiredFields.filter(field => !executionData[field]);\n\n    if (missingFields.length > 0) {\n      console.error(\"🚨 Missing required fields:\", missingFields);\n      throw new Error(`Missing fields: ${missingFields.join(', ')}`);\n    }\n\n    // ✅ Ensure processId & vendorId are strings\n    executionData.processId = String(executionData.processId);\n    executionData.vendorId = String(executionData.vendorId);\n\n    console.log(\"✅ Sending Execution Details:\", executionData);\n\n    const response = await API.post('/executiondetails', executionData);\n    console.log('✅ Execution Details Created:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error adding execution details:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n\n\n\n// 3. Update Execution Details (Received Materials & Status)\nexport const updateExecutionDetails = async (executionId, updateData) => {\n  try {\n    if (!executionId || typeof executionId !== 'string') {\n      throw new Error(\"Invalid execution ID provided\");\n    }\n\n    if (!updateData || typeof updateData !== 'object') {\n      throw new Error(\"Invalid update data provided\");\n    }\n\n    console.log(`🔄 Updating Execution ${executionId}:`, updateData);\n\n    const response = await API.put(`/executiondetails/${executionId}`, updateData);\n    console.log('✅ Execution Details Updated:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error updating execution details:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n\n// 4. Fetch Execution Details for a Specific Line Item\nexport const fetchExecutionDetailsForLineItem = async (lineItemId) => {\n  try {\n    if (!lineItemId) throw new Error(\"lineItemId is required\");\n\n    const encodedId = encodeURIComponent(lineItemId);\n    const response = await API.get(`/executiondetails/lineitem/${encodedId}`);\n\n    console.log('✅ Execution Details for Line Item:', response.data);\n\n    // ✅ Ensure response is always an array\n    return Array.isArray(response.data) ? response.data : [];\n  } catch (error) {\n    if (error.response?.status === 404) {\n      console.warn(`⚠️ No execution details found for lineItemId: ${lineItemId}`);\n      return [];\n    }\n\n    console.error('❌ Error fetching execution details for line item:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n\n// 5. Delete Execution Details (For a Vendor-Process)\nexport const deleteExecutionDetails = async (executionId) => {\n  try {\n    if (!executionId) throw new Error(\"executionId is required\");\n\n    console.log(`🗑 Deleting Execution ID: ${executionId}`);\n    \n    const response = await API.delete(`/executiondetails/${executionId}`);\n    console.log('✅ Execution Details Deleted:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('❌ Error deleting execution details:', error.response?.data || error.message);\n    throw error;\n  }\n};\n\n\n\nexport default API;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}